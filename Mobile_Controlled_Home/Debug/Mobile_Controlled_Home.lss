
Mobile_Controlled_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000246  00800060  000030f0  00003184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  008002a6  008002a6  000033ca  2**0
                  ALLOC
  3 .stab         000030e4  00000000  00000000  000033cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001562  00000000  00000000  000064b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000990b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a7f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b5a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b704  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b991  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c15f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__vector_4>
      14:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__vector_5>
      18:	0c 94 b5 14 	jmp	0x296a	; 0x296a <__vector_6>
      1c:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__vector_7>
      20:	0c 94 0f 15 	jmp	0x2a1e	; 0x2a1e <__vector_8>
      24:	0c 94 3c 15 	jmp	0x2a78	; 0x2a78 <__vector_9>
      28:	0c 94 69 15 	jmp	0x2ad2	; 0x2ad2 <__vector_10>
      2c:	0c 94 96 15 	jmp	0x2b2c	; 0x2b2c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3c       	cpi	r26, 0xC2	; 194
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <main>
      8a:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e9       	ldi	r26, 0x93	; 147
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e9       	ldi	r24, 0x93	; 147
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4f 18 	jmp	0x309e	; 0x309e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:


u8 ADC_u8BusyState= IDLE;

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
#if VOLT_REF == AREF			//AREF, Internal Vref turned off
	CLR_BIT(ADMUX,ADMUX_REFS1);
	CLR_BIT(ADMUX,ADMUX_REFS0);

#elif VOLT_REF == AVCC			//AVCC with external capacitor at AREF pin
	CLR_BIT(ADMUX, ADMUX_REFS1);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
	SET_BIT(ADMUX, ADMUX_REFS0);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24

#if BITS_ADJUST == BITS_8			/*ACTIVATE Left Adjust*/
	SET_BIT(ADMUX,ADMUX_ADLAR);

#elif BITS_ADJUST == BITS_10
	CLR_BIT(ADMUX, ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24
#error "BITS_ADJUST is not exist"

#endif

	/*Set Prescaler to divide from Div_2 to Div_128*/   //select Div_128 //with Bit masking Not #if
	ADCSRA = ((ADCSRA &= 0b11111000) | ADC_PRESC);
     b78:	26 e2       	ldi	r18, 0x26	; 38
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	a6 e2       	ldi	r26, 0x26	; 38
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	e6 e2       	ldi	r30, 0x26	; 38
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	88 7f       	andi	r24, 0xF8	; 248
     b88:	8c 93       	st	X, r24
     b8a:	8c 91       	ld	r24, X
     b8c:	87 60       	ori	r24, 0x07	; 7
     b8e:	f9 01       	movw	r30, r18
     b90:	80 83       	st	Z, r24

	/*ADC ENABLE*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     b92:	a6 e2       	ldi	r26, 0x26	; 38
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e6 e2       	ldi	r30, 0x26	; 38
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	80 68       	ori	r24, 0x80	; 128
     b9e:	8c 93       	st	X, r24

}
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <ADC_u16StartConversionSynch>:

u16 ADC_u16StartConversionSynch(u8 copy_u8Channel, u16* copy_pu8Reading)
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	29 97       	sbiw	r28, 0x09	; 9
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
     bba:	8f 83       	std	Y+7, r24	; 0x07
     bbc:	79 87       	std	Y+9, r23	; 0x09
     bbe:	68 87       	std	Y+8, r22	; 0x08
	u32 Local_u32Counter=0;
     bc0:	1b 82       	std	Y+3, r1	; 0x03
     bc2:	1c 82       	std	Y+4, r1	; 0x04
     bc4:	1d 82       	std	Y+5, r1	; 0x05
     bc6:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8ErrorState=OK;
     bc8:	1a 82       	std	Y+2, r1	; 0x02

	if(ADC_u8BusyState == IDLE)
     bca:	80 91 af 02 	lds	r24, 0x02AF
     bce:	88 23       	and	r24, r24
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <ADC_u16StartConversionSynch+0x2e>
     bd2:	5c c0       	rjmp	.+184    	; 0xc8c <ADC_u16StartConversionSynch+0xe6>
	{
		/*ADC is now BUSY*/
		ADC_u8BusyState= BUSY;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	80 93 af 02 	sts	0x02AF, r24

		/*Bit_Mask	1: Clear bits in AMUX register
					2: Set the required channel into the MUX bits*/
		ADMUX = ((ADMUX &= 0b11100000) | copy_u8Channel);
     bda:	27 e2       	ldi	r18, 0x27	; 39
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	a7 e2       	ldi	r26, 0x27	; 39
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e7 e2       	ldi	r30, 0x27	; 39
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	80 7e       	andi	r24, 0xE0	; 224
     bea:	8c 93       	st	X, r24
     bec:	9c 91       	ld	r25, X
     bee:	8f 81       	ldd	r24, Y+7	; 0x07
     bf0:	89 2b       	or	r24, r25
     bf2:	f9 01       	movw	r30, r18
     bf4:	80 83       	st	Z, r24

		/*Start Conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     bf6:	a6 e2       	ldi	r26, 0x26	; 38
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e6 e2       	ldi	r30, 0x26	; 38
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 64       	ori	r24, 0x40	; 64
     c02:	8c 93       	st	X, r24
     c04:	0b c0       	rjmp	.+22     	; 0xc1c <ADC_u16StartConversionSynch+0x76>

		/*Polling (busy waiting) until the conversion complete flag is set of counter reaching timeout value*/
		while (((GET_BIT(ADCSRA,ADCSRA_ADIF)) == 0) && (Local_u32Counter != ADC_u32TIMEOUT))
		{
			Local_u32Counter++;
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	9c 81       	ldd	r25, Y+4	; 0x04
     c0a:	ad 81       	ldd	r26, Y+5	; 0x05
     c0c:	be 81       	ldd	r27, Y+6	; 0x06
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	a1 1d       	adc	r26, r1
     c12:	b1 1d       	adc	r27, r1
     c14:	8b 83       	std	Y+3, r24	; 0x03
     c16:	9c 83       	std	Y+4, r25	; 0x04
     c18:	ad 83       	std	Y+5, r26	; 0x05
     c1a:	be 83       	std	Y+6, r27	; 0x06

		/*Start Conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*Polling (busy waiting) until the conversion complete flag is set of counter reaching timeout value*/
		while (((GET_BIT(ADCSRA,ADCSRA_ADIF)) == 0) && (Local_u32Counter != ADC_u32TIMEOUT))
     c1c:	e6 e2       	ldi	r30, 0x26	; 38
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	82 95       	swap	r24
     c24:	8f 70       	andi	r24, 0x0F	; 15
     c26:	88 2f       	mov	r24, r24
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	81 70       	andi	r24, 0x01	; 1
     c2c:	90 70       	andi	r25, 0x00	; 0
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	61 f4       	brne	.+24     	; 0xc4a <ADC_u16StartConversionSynch+0xa4>
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	ad 81       	ldd	r26, Y+5	; 0x05
     c38:	be 81       	ldd	r27, Y+6	; 0x06
     c3a:	80 35       	cpi	r24, 0x50	; 80
     c3c:	f3 ec       	ldi	r31, 0xC3	; 195
     c3e:	9f 07       	cpc	r25, r31
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	af 07       	cpc	r26, r31
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	bf 07       	cpc	r27, r31
     c48:	f1 f6       	brne	.-68     	; 0xc06 <ADC_u16StartConversionSynch+0x60>
		{
			Local_u32Counter++;
		}
		if (Local_u32Counter == ADC_u32TIMEOUT)
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	9c 81       	ldd	r25, Y+4	; 0x04
     c4e:	ad 81       	ldd	r26, Y+5	; 0x05
     c50:	be 81       	ldd	r27, Y+6	; 0x06
     c52:	80 35       	cpi	r24, 0x50	; 80
     c54:	23 ec       	ldi	r18, 0xC3	; 195
     c56:	92 07       	cpc	r25, r18
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	a2 07       	cpc	r26, r18
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	b2 07       	cpc	r27, r18
     c60:	19 f4       	brne	.+6      	; 0xc68 <ADC_u16StartConversionSynch+0xc2>
		{
			/*loop is broken because of timeout is reached*/
			u8 Local_u8ErrorState = NOK;
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	89 83       	std	Y+1, r24	; 0x01
     c66:	14 c0       	rjmp	.+40     	; 0xc90 <ADC_u16StartConversionSynch+0xea>
		}
		else
		{
			/*loop is broken because flag is raised*/
			/*Clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
     c68:	a6 e2       	ldi	r26, 0x26	; 38
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e6 e2       	ldi	r30, 0x26	; 38
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	80 61       	ori	r24, 0x10	; 16
     c74:	8c 93       	st	X, r24

			/*Return the reading*/
			*copy_pu8Reading = ADC;
     c76:	e4 e2       	ldi	r30, 0x24	; 36
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	91 81       	ldd	r25, Z+1	; 0x01
     c7e:	e8 85       	ldd	r30, Y+8	; 0x08
     c80:	f9 85       	ldd	r31, Y+9	; 0x09
     c82:	91 83       	std	Z+1, r25	; 0x01
     c84:	80 83       	st	Z, r24

			/*ADC is finished, return it to IDLE*/
			ADC_u8BusyState= IDLE;
     c86:	10 92 af 02 	sts	0x02AF, r1
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <ADC_u16StartConversionSynch+0xea>
		}
	}
		else
	{
		Local_u8ErrorState = BUSY_FUNC;
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
     c90:	8a 81       	ldd	r24, Y+2	; 0x02
     c92:	88 2f       	mov	r24, r24
     c94:	90 e0       	ldi	r25, 0x00	; 0
}
     c96:	29 96       	adiw	r28, 0x09	; 9
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	cf 91       	pop	r28
     ca4:	df 91       	pop	r29
     ca6:	08 95       	ret

00000ca8 <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 copy_u8Channel, u8* copy_pu8Reading, void(*Copy_pvNotificationFunc)(void))
{
     ca8:	df 93       	push	r29
     caa:	cf 93       	push	r28
     cac:	00 d0       	rcall	.+0      	; 0xcae <ADC_u8StartConversionAsynch+0x6>
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <ADC_u8StartConversionAsynch+0x8>
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <ADC_u8StartConversionAsynch+0xa>
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
     cb6:	8a 83       	std	Y+2, r24	; 0x02
     cb8:	7c 83       	std	Y+4, r23	; 0x04
     cba:	6b 83       	std	Y+3, r22	; 0x03
     cbc:	5e 83       	std	Y+6, r21	; 0x06
     cbe:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_uErrorState=OK;
     cc0:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_u8BusyState == IDLE)
     cc2:	80 91 af 02 	lds	r24, 0x02AF
     cc6:	88 23       	and	r24, r24
     cc8:	c9 f5       	brne	.+114    	; 0xd3c <ADC_u8StartConversionAsynch+0x94>
	{
		if((copy_pu8Reading == NULL) || (Copy_pvNotificationFunc == NULL))
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	9c 81       	ldd	r25, Y+4	; 0x04
     cce:	00 97       	sbiw	r24, 0x00	; 0
     cd0:	21 f0       	breq	.+8      	; 0xcda <ADC_u8StartConversionAsynch+0x32>
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
     cd4:	9e 81       	ldd	r25, Y+6	; 0x06
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	19 f4       	brne	.+6      	; 0xce0 <ADC_u8StartConversionAsynch+0x38>
		{
			Local_uErrorState = NULL_POINTER;
     cda:	82 e0       	ldi	r24, 0x02	; 2
     cdc:	89 83       	std	Y+1, r24	; 0x01
     cde:	30 c0       	rjmp	.+96     	; 0xd40 <ADC_u8StartConversionAsynch+0x98>
		}
		else
		{
			/*make ADC busy in order not to work until being idle*/
			ADC_u8BusyState= BUSY;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	80 93 af 02 	sts	0x02AF, r24

			/*make ISR source: single channel asynchronous*/
			ADC_u8ISRSource = Single_Channel_Async;
     ce6:	10 92 b1 02 	sts	0x02B1, r1

			/*Initialize the reading variable globally*/
			ADC_pu8Reading = copy_pu8Reading;
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	90 93 a7 02 	sts	0x02A7, r25
     cf2:	80 93 a6 02 	sts	0x02A6, r24

			/*Initialize the callback notification function globally*/
			ADC_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
     cf6:	8d 81       	ldd	r24, Y+5	; 0x05
     cf8:	9e 81       	ldd	r25, Y+6	; 0x06
     cfa:	90 93 a9 02 	sts	0x02A9, r25
     cfe:	80 93 a8 02 	sts	0x02A8, r24

			/*Bit_Mask	1: Clear bits in AMUX register
						2: Set the required channel into the MUX bits*/
			ADMUX = ((ADMUX &= 0b11100000)|copy_u8Channel);
     d02:	27 e2       	ldi	r18, 0x27	; 39
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	a7 e2       	ldi	r26, 0x27	; 39
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e7 e2       	ldi	r30, 0x27	; 39
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	80 7e       	andi	r24, 0xE0	; 224
     d12:	8c 93       	st	X, r24
     d14:	9c 91       	ld	r25, X
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	89 2b       	or	r24, r25
     d1a:	f9 01       	movw	r30, r18
     d1c:	80 83       	st	Z, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d1e:	a6 e2       	ldi	r26, 0x26	; 38
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e6 e2       	ldi	r30, 0x26	; 38
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	80 64       	ori	r24, 0x40	; 64
     d2a:	8c 93       	st	X, r24

			/*ADC interrupt Enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     d2c:	a6 e2       	ldi	r26, 0x26	; 38
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e6 e2       	ldi	r30, 0x26	; 38
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	88 60       	ori	r24, 0x08	; 8
     d38:	8c 93       	st	X, r24
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <ADC_u8StartConversionAsynch+0x98>
		}

	}
	else
	{
		Local_uErrorState = BUSY_FUNC;
     d3c:	83 e0       	ldi	r24, 0x03	; 3
     d3e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_uErrorState;
     d40:	89 81       	ldd	r24, Y+1	; 0x01
}
     d42:	26 96       	adiw	r28, 0x06	; 6
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <ADC_u8StartChainAsynch>:

u8 ADC_u8StartChainAsynch(Chain* Copy_Chain)
{
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	00 d0       	rcall	.+0      	; 0xd5a <ADC_u8StartChainAsynch+0x6>
     d5a:	0f 92       	push	r0
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	9b 83       	std	Y+3, r25	; 0x03
     d62:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_uErrorState = OK;
     d64:	19 82       	std	Y+1, r1	; 0x01

	//Check Null Pointer
	if(Copy_Chain == NULL)
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	9b 81       	ldd	r25, Y+3	; 0x03
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	19 f4       	brne	.+6      	; 0xd74 <ADC_u8StartChainAsynch+0x20>
	{
		Local_uErrorState = NULL_POINTER;
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	54 c0       	rjmp	.+168    	; 0xe1c <ADC_u8StartChainAsynch+0xc8>
	}
	else
	{
		if(ADC_u8BusyState == IDLE)
     d74:	80 91 af 02 	lds	r24, 0x02AF
     d78:	88 23       	and	r24, r24
     d7a:	09 f0       	breq	.+2      	; 0xd7e <ADC_u8StartChainAsynch+0x2a>
     d7c:	4d c0       	rjmp	.+154    	; 0xe18 <ADC_u8StartChainAsynch+0xc4>
		{
			//make ADC busy in order not to work until being idle
			ADC_u8BusyState= BUSY;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	80 93 af 02 	sts	0x02AF, r24

			/*make ISR source: Chain asynchronous*/
			ADC_u8ISRSource = Chain_Async;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	80 93 b1 02 	sts	0x02B1, r24

			//Initialize the Chain Channel Array globally
			ADC_pu8ChainChannelArr = Copy_Chain->Channel;
     d8a:	ea 81       	ldd	r30, Y+2	; 0x02
     d8c:	fb 81       	ldd	r31, Y+3	; 0x03
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	90 93 ab 02 	sts	0x02AB, r25
     d96:	80 93 aa 02 	sts	0x02AA, r24

			//Initialize the result array globally
			ADC_pu16ChainResultArr = Copy_Chain->Res;
     d9a:	ea 81       	ldd	r30, Y+2	; 0x02
     d9c:	fb 81       	ldd	r31, Y+3	; 0x03
     d9e:	82 81       	ldd	r24, Z+2	; 0x02
     da0:	93 81       	ldd	r25, Z+3	; 0x03
     da2:	90 93 ad 02 	sts	0x02AD, r25
     da6:	80 93 ac 02 	sts	0x02AC, r24

			//Initialize the Chain Size globally
			ADC_u8ChainSize = Copy_Chain->Size;
     daa:	ea 81       	ldd	r30, Y+2	; 0x02
     dac:	fb 81       	ldd	r31, Y+3	; 0x03
     dae:	84 81       	ldd	r24, Z+4	; 0x04
     db0:	80 93 b0 02 	sts	0x02B0, r24

			//Initialize the callback notification function globally
			ADC_pvCallBackNotificationFunc = Copy_Chain->NotoficationFunc;
     db4:	ea 81       	ldd	r30, Y+2	; 0x02
     db6:	fb 81       	ldd	r31, Y+3	; 0x03
     db8:	85 81       	ldd	r24, Z+5	; 0x05
     dba:	96 81       	ldd	r25, Z+6	; 0x06
     dbc:	90 93 a9 02 	sts	0x02A9, r25
     dc0:	80 93 a8 02 	sts	0x02A8, r24

			//Initialize current conversation index globally
			ADC_pu8ChainConversationIndex = 0;
     dc4:	10 92 ae 02 	sts	0x02AE, r1

			//Bit_Mask	1: Clear bits in AMUX register
			//          2: Set the required channel (first channel) into the MUX bits
			ADMUX = ((ADMUX &= 0b11100000) | ADC_pu8ChainChannelArr[ADC_pu8ChainConversationIndex]);
     dc8:	47 e2       	ldi	r20, 0x27	; 39
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	a7 e2       	ldi	r26, 0x27	; 39
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e7 e2       	ldi	r30, 0x27	; 39
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	80 7e       	andi	r24, 0xE0	; 224
     dd8:	8c 93       	st	X, r24
     dda:	6c 91       	ld	r22, X
     ddc:	20 91 aa 02 	lds	r18, 0x02AA
     de0:	30 91 ab 02 	lds	r19, 0x02AB
     de4:	80 91 ae 02 	lds	r24, 0x02AE
     de8:	88 2f       	mov	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	f9 01       	movw	r30, r18
     dee:	e8 0f       	add	r30, r24
     df0:	f9 1f       	adc	r31, r25
     df2:	80 81       	ld	r24, Z
     df4:	86 2b       	or	r24, r22
     df6:	fa 01       	movw	r30, r20
     df8:	80 83       	st	Z, r24

			//Start Conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     dfa:	a6 e2       	ldi	r26, 0x26	; 38
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e6 e2       	ldi	r30, 0x26	; 38
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	80 64       	ori	r24, 0x40	; 64
     e06:	8c 93       	st	X, r24

			//ADC interrupt Enable
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     e08:	a6 e2       	ldi	r26, 0x26	; 38
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e6 e2       	ldi	r30, 0x26	; 38
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	88 60       	ori	r24, 0x08	; 8
     e14:	8c 93       	st	X, r24
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <ADC_u8StartChainAsynch+0xc8>
		}
		else
		{
			Local_uErrorState = BUSY_FUNC;
     e18:	83 e0       	ldi	r24, 0x03	; 3
     e1a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_uErrorState;
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <__vector_16>:


void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
     e2a:	1f 92       	push	r1
     e2c:	0f 92       	push	r0
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	0f 92       	push	r0
     e32:	11 24       	eor	r1, r1
     e34:	2f 93       	push	r18
     e36:	3f 93       	push	r19
     e38:	4f 93       	push	r20
     e3a:	5f 93       	push	r21
     e3c:	6f 93       	push	r22
     e3e:	7f 93       	push	r23
     e40:	8f 93       	push	r24
     e42:	9f 93       	push	r25
     e44:	af 93       	push	r26
     e46:	bf 93       	push	r27
     e48:	ef 93       	push	r30
     e4a:	ff 93       	push	r31
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRSource == Single_Channel_Async)
     e54:	80 91 b1 02 	lds	r24, 0x02B1
     e58:	88 23       	and	r24, r24
     e5a:	c9 f4       	brne	.+50     	; 0xe8e <__vector_16+0x64>
	{
		/*Read ADC result*/
		*ADC_pu8Reading = ADC;
     e5c:	a0 91 a6 02 	lds	r26, 0x02A6
     e60:	b0 91 a7 02 	lds	r27, 0x02A7
     e64:	e4 e2       	ldi	r30, 0x24	; 36
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	91 81       	ldd	r25, Z+1	; 0x01
     e6c:	8d 93       	st	X+, r24
     e6e:	9c 93       	st	X, r25

		/*make ADC state be IDLE because it finished*/
		ADC_u8BusyState = IDLE;
     e70:	10 92 af 02 	sts	0x02AF, r1

		/*Invoke the callback notification function*/
		ADC_pvCallBackNotificationFunc();
     e74:	e0 91 a8 02 	lds	r30, 0x02A8
     e78:	f0 91 a9 02 	lds	r31, 0x02A9
     e7c:	09 95       	icall

		/*Disable ADC conversion complete interrupt*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
     e7e:	a6 e2       	ldi	r26, 0x26	; 38
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e6 e2       	ldi	r30, 0x26	; 38
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	87 7f       	andi	r24, 0xF7	; 247
     e8a:	8c 93       	st	X, r24
     e8c:	53 c0       	rjmp	.+166    	; 0xf34 <__vector_16+0x10a>
	}
	else if(ADC_u8ISRSource == Chain_Async)
     e8e:	80 91 b1 02 	lds	r24, 0x02B1
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	09 f0       	breq	.+2      	; 0xe98 <__vector_16+0x6e>
     e96:	4e c0       	rjmp	.+156    	; 0xf34 <__vector_16+0x10a>
	{
		/*Read ADC result*/
		ADC_pu16ChainResultArr[ADC_pu8ChainConversationIndex] = ADC;
     e98:	20 91 ac 02 	lds	r18, 0x02AC
     e9c:	30 91 ad 02 	lds	r19, 0x02AD
     ea0:	80 91 ae 02 	lds	r24, 0x02AE
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	d9 01       	movw	r26, r18
     eae:	a8 0f       	add	r26, r24
     eb0:	b9 1f       	adc	r27, r25
     eb2:	e4 e2       	ldi	r30, 0x24	; 36
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	91 81       	ldd	r25, Z+1	; 0x01
     eba:	11 96       	adiw	r26, 0x01	; 1
     ebc:	9c 93       	st	X, r25
     ebe:	8e 93       	st	-X, r24

		/*Increment Index*/
		ADC_pu8ChainConversationIndex++;
     ec0:	80 91 ae 02 	lds	r24, 0x02AE
     ec4:	8f 5f       	subi	r24, 0xFF	; 255
     ec6:	80 93 ae 02 	sts	0x02AE, r24

		/*check chain is finished or not*/
		if(ADC_pu8ChainConversationIndex == ADC_u8ChainSize)
     eca:	90 91 ae 02 	lds	r25, 0x02AE
     ece:	80 91 b0 02 	lds	r24, 0x02B0
     ed2:	98 17       	cp	r25, r24
     ed4:	79 f4       	brne	.+30     	; 0xef4 <__vector_16+0xca>
		{
			/*Chain is finished*/

			/*make ADC state be IDLE because it finished*/
			ADC_u8BusyState = IDLE;
     ed6:	10 92 af 02 	sts	0x02AF, r1

			/*Invoke the callback notification function*/
			ADC_pvCallBackNotificationFunc();
     eda:	e0 91 a8 02 	lds	r30, 0x02A8
     ede:	f0 91 a9 02 	lds	r31, 0x02A9
     ee2:	09 95       	icall

			/*Disable ADC conversion complete interrupt*/
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
     ee4:	a6 e2       	ldi	r26, 0x26	; 38
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e6 e2       	ldi	r30, 0x26	; 38
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	87 7f       	andi	r24, 0xF7	; 247
     ef0:	8c 93       	st	X, r24
     ef2:	20 c0       	rjmp	.+64     	; 0xf34 <__vector_16+0x10a>
		{
			/*chain is not finished*/

			//Bit_Mask	1: Clear bits in AMUX register
			//          2: Set the required channel (next channel) into the MUX bits
			ADMUX = ((ADMUX &= 0b11100000)|ADC_pu8ChainChannelArr[ADC_pu8ChainConversationIndex]);
     ef4:	47 e2       	ldi	r20, 0x27	; 39
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	a7 e2       	ldi	r26, 0x27	; 39
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e7 e2       	ldi	r30, 0x27	; 39
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	80 7e       	andi	r24, 0xE0	; 224
     f04:	8c 93       	st	X, r24
     f06:	6c 91       	ld	r22, X
     f08:	20 91 aa 02 	lds	r18, 0x02AA
     f0c:	30 91 ab 02 	lds	r19, 0x02AB
     f10:	80 91 ae 02 	lds	r24, 0x02AE
     f14:	88 2f       	mov	r24, r24
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	f9 01       	movw	r30, r18
     f1a:	e8 0f       	add	r30, r24
     f1c:	f9 1f       	adc	r31, r25
     f1e:	80 81       	ld	r24, Z
     f20:	86 2b       	or	r24, r22
     f22:	fa 01       	movw	r30, r20
     f24:	80 83       	st	Z, r24

			/*Start new Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     f26:	a6 e2       	ldi	r26, 0x26	; 38
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e6 e2       	ldi	r30, 0x26	; 38
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	80 64       	ori	r24, 0x40	; 64
     f32:	8c 93       	st	X, r24
		}
	}
}
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	ff 91       	pop	r31
     f3a:	ef 91       	pop	r30
     f3c:	bf 91       	pop	r27
     f3e:	af 91       	pop	r26
     f40:	9f 91       	pop	r25
     f42:	8f 91       	pop	r24
     f44:	7f 91       	pop	r23
     f46:	6f 91       	pop	r22
     f48:	5f 91       	pop	r21
     f4a:	4f 91       	pop	r20
     f4c:	3f 91       	pop	r19
     f4e:	2f 91       	pop	r18
     f50:	0f 90       	pop	r0
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	0f 90       	pop	r0
     f56:	1f 90       	pop	r1
     f58:	18 95       	reti

00000f5a <mapping>:

s32 mapping (s32 Input_min, s32 Input_max, s32 Output_min, s32 Output_max, s32 Input_Val)
{
     f5a:	af 92       	push	r10
     f5c:	bf 92       	push	r11
     f5e:	cf 92       	push	r12
     f60:	df 92       	push	r13
     f62:	ef 92       	push	r14
     f64:	ff 92       	push	r15
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	60 97       	sbiw	r28, 0x10	; 16
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	69 83       	std	Y+1, r22	; 0x01
     f80:	7a 83       	std	Y+2, r23	; 0x02
     f82:	8b 83       	std	Y+3, r24	; 0x03
     f84:	9c 83       	std	Y+4, r25	; 0x04
     f86:	2d 83       	std	Y+5, r18	; 0x05
     f88:	3e 83       	std	Y+6, r19	; 0x06
     f8a:	4f 83       	std	Y+7, r20	; 0x07
     f8c:	58 87       	std	Y+8, r21	; 0x08
     f8e:	e9 86       	std	Y+9, r14	; 0x09
     f90:	fa 86       	std	Y+10, r15	; 0x0a
     f92:	0b 87       	std	Y+11, r16	; 0x0b
     f94:	1c 87       	std	Y+12, r17	; 0x0c
     f96:	ad 86       	std	Y+13, r10	; 0x0d
     f98:	be 86       	std	Y+14, r11	; 0x0e
     f9a:	cf 86       	std	Y+15, r12	; 0x0f
     f9c:	d8 8a       	std	Y+16, r13	; 0x10
	return  ((((Output_max - Output_min)*(Input_Val-Input_min))/(Input_max-Input_min))+Output_min);
     f9e:	2d 85       	ldd	r18, Y+13	; 0x0d
     fa0:	3e 85       	ldd	r19, Y+14	; 0x0e
     fa2:	4f 85       	ldd	r20, Y+15	; 0x0f
     fa4:	58 89       	ldd	r21, Y+16	; 0x10
     fa6:	89 85       	ldd	r24, Y+9	; 0x09
     fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
     faa:	ab 85       	ldd	r26, Y+11	; 0x0b
     fac:	bc 85       	ldd	r27, Y+12	; 0x0c
     fae:	79 01       	movw	r14, r18
     fb0:	8a 01       	movw	r16, r20
     fb2:	e8 1a       	sub	r14, r24
     fb4:	f9 0a       	sbc	r15, r25
     fb6:	0a 0b       	sbc	r16, r26
     fb8:	1b 0b       	sbc	r17, r27
     fba:	2d 8d       	ldd	r18, Y+29	; 0x1d
     fbc:	3e 8d       	ldd	r19, Y+30	; 0x1e
     fbe:	4f 8d       	ldd	r20, Y+31	; 0x1f
     fc0:	58 a1       	ldd	r21, Y+32	; 0x20
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	9a 81       	ldd	r25, Y+2	; 0x02
     fc6:	ab 81       	ldd	r26, Y+3	; 0x03
     fc8:	bc 81       	ldd	r27, Y+4	; 0x04
     fca:	28 1b       	sub	r18, r24
     fcc:	39 0b       	sbc	r19, r25
     fce:	4a 0b       	sbc	r20, r26
     fd0:	5b 0b       	sbc	r21, r27
     fd2:	c8 01       	movw	r24, r16
     fd4:	b7 01       	movw	r22, r14
     fd6:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__mulsi3>
     fda:	7b 01       	movw	r14, r22
     fdc:	8c 01       	movw	r16, r24
     fde:	2d 81       	ldd	r18, Y+5	; 0x05
     fe0:	3e 81       	ldd	r19, Y+6	; 0x06
     fe2:	4f 81       	ldd	r20, Y+7	; 0x07
     fe4:	58 85       	ldd	r21, Y+8	; 0x08
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	9a 81       	ldd	r25, Y+2	; 0x02
     fea:	ab 81       	ldd	r26, Y+3	; 0x03
     fec:	bc 81       	ldd	r27, Y+4	; 0x04
     fee:	28 1b       	sub	r18, r24
     ff0:	39 0b       	sbc	r19, r25
     ff2:	4a 0b       	sbc	r20, r26
     ff4:	5b 0b       	sbc	r21, r27
     ff6:	c8 01       	movw	r24, r16
     ff8:	b7 01       	movw	r22, r14
     ffa:	0e 94 24 18 	call	0x3048	; 0x3048 <__divmodsi4>
     ffe:	da 01       	movw	r26, r20
    1000:	c9 01       	movw	r24, r18
    1002:	9c 01       	movw	r18, r24
    1004:	ad 01       	movw	r20, r26
    1006:	89 85       	ldd	r24, Y+9	; 0x09
    1008:	9a 85       	ldd	r25, Y+10	; 0x0a
    100a:	ab 85       	ldd	r26, Y+11	; 0x0b
    100c:	bc 85       	ldd	r27, Y+12	; 0x0c
    100e:	82 0f       	add	r24, r18
    1010:	93 1f       	adc	r25, r19
    1012:	a4 1f       	adc	r26, r20
    1014:	b5 1f       	adc	r27, r21
}
    1016:	bc 01       	movw	r22, r24
    1018:	cd 01       	movw	r24, r26
    101a:	60 96       	adiw	r28, 0x10	; 16
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	bf 90       	pop	r11
    1038:	af 90       	pop	r10
    103a:	08 95       	ret

0000103c <DIO_u8_SetPin_value>:
#include"BIT_CALC.h"
#include"DIO_Private.h"
#include"DIO_Interface.h"

u8 DIO_u8_SetPin_value(u8 Copy_u8_PortID,u8 Copy_u8_Pin_ID,u8 Copy_u8_Pin_Val)
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	00 d0       	rcall	.+0      	; 0x1042 <DIO_u8_SetPin_value+0x6>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <DIO_u8_SetPin_value+0x8>
    1044:	00 d0       	rcall	.+0      	; 0x1046 <DIO_u8_SetPin_value+0xa>
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	6a 83       	std	Y+2, r22	; 0x02
    104e:	4b 83       	std	Y+3, r20	; 0x03

	if( (Copy_u8_Pin_ID >= 0) && (Copy_u8_Pin_ID <= 7) ){
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	88 30       	cpi	r24, 0x08	; 8
    1054:	08 f0       	brcs	.+2      	; 0x1058 <DIO_u8_SetPin_value+0x1c>
    1056:	e0 c0       	rjmp	.+448    	; 0x1218 <DIO_u8_SetPin_value+0x1dc>

		if( (Copy_u8_Pin_Val == DIO_u8_Low) || (Copy_u8_Pin_Val == DIO_u8_High) ){
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	88 23       	and	r24, r24
    105c:	21 f0       	breq	.+8      	; 0x1066 <DIO_u8_SetPin_value+0x2a>
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	09 f0       	breq	.+2      	; 0x1066 <DIO_u8_SetPin_value+0x2a>
    1064:	d7 c0       	rjmp	.+430    	; 0x1214 <DIO_u8_SetPin_value+0x1d8>

			switch(Copy_u8_PortID){
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	3e 83       	std	Y+6, r19	; 0x06
    106e:	2d 83       	std	Y+5, r18	; 0x05
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	9e 81       	ldd	r25, Y+6	; 0x06
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	91 05       	cpc	r25, r1
    1078:	09 f4       	brne	.+2      	; 0x107c <DIO_u8_SetPin_value+0x40>
    107a:	43 c0       	rjmp	.+134    	; 0x1102 <DIO_u8_SetPin_value+0xc6>
    107c:	2d 81       	ldd	r18, Y+5	; 0x05
    107e:	3e 81       	ldd	r19, Y+6	; 0x06
    1080:	22 30       	cpi	r18, 0x02	; 2
    1082:	31 05       	cpc	r19, r1
    1084:	2c f4       	brge	.+10     	; 0x1090 <DIO_u8_SetPin_value+0x54>
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	9e 81       	ldd	r25, Y+6	; 0x06
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	71 f0       	breq	.+28     	; 0x10aa <DIO_u8_SetPin_value+0x6e>
    108e:	bd c0       	rjmp	.+378    	; 0x120a <DIO_u8_SetPin_value+0x1ce>
    1090:	2d 81       	ldd	r18, Y+5	; 0x05
    1092:	3e 81       	ldd	r19, Y+6	; 0x06
    1094:	22 30       	cpi	r18, 0x02	; 2
    1096:	31 05       	cpc	r19, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <DIO_u8_SetPin_value+0x60>
    109a:	5f c0       	rjmp	.+190    	; 0x115a <DIO_u8_SetPin_value+0x11e>
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	9e 81       	ldd	r25, Y+6	; 0x06
    10a0:	83 30       	cpi	r24, 0x03	; 3
    10a2:	91 05       	cpc	r25, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <DIO_u8_SetPin_value+0x6c>
    10a6:	85 c0       	rjmp	.+266    	; 0x11b2 <DIO_u8_SetPin_value+0x176>
    10a8:	b0 c0       	rjmp	.+352    	; 0x120a <DIO_u8_SetPin_value+0x1ce>

			case Group_A:
				ASSIGN_Bit(DIO_u8_PORTA, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	a1 f4       	brne	.+40     	; 0x10d8 <DIO_u8_SetPin_value+0x9c>
    10b0:	ab e3       	ldi	r26, 0x3B	; 59
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	eb e3       	ldi	r30, 0x3B	; 59
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 2e       	mov	r0, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_u8_SetPin_value+0x92>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_u8_SetPin_value+0x8e>
    10d2:	84 2b       	or	r24, r20
    10d4:	8c 93       	st	X, r24
    10d6:	9b c0       	rjmp	.+310    	; 0x120e <DIO_u8_SetPin_value+0x1d2>
    10d8:	ab e3       	ldi	r26, 0x3B	; 59
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	eb e3       	ldi	r30, 0x3B	; 59
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO_u8_SetPin_value+0xba>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO_u8_SetPin_value+0xb6>
    10fa:	80 95       	com	r24
    10fc:	84 23       	and	r24, r20
    10fe:	8c 93       	st	X, r24
    1100:	86 c0       	rjmp	.+268    	; 0x120e <DIO_u8_SetPin_value+0x1d2>
				break;

			case Group_B:
				ASSIGN_Bit(DIO_u8_PORTB, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	a1 f4       	brne	.+40     	; 0x1130 <DIO_u8_SetPin_value+0xf4>
    1108:	a8 e3       	ldi	r26, 0x38	; 56
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e8 e3       	ldi	r30, 0x38	; 56
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <DIO_u8_SetPin_value+0xea>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <DIO_u8_SetPin_value+0xe6>
    112a:	84 2b       	or	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	6f c0       	rjmp	.+222    	; 0x120e <DIO_u8_SetPin_value+0x1d2>
    1130:	a8 e3       	ldi	r26, 0x38	; 56
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e8 e3       	ldi	r30, 0x38	; 56
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_u8_SetPin_value+0x112>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <DIO_u8_SetPin_value+0x10e>
    1152:	80 95       	com	r24
    1154:	84 23       	and	r24, r20
    1156:	8c 93       	st	X, r24
    1158:	5a c0       	rjmp	.+180    	; 0x120e <DIO_u8_SetPin_value+0x1d2>
				break;

			case Group_C:
				ASSIGN_Bit(DIO_u8_PORTC, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	a1 f4       	brne	.+40     	; 0x1188 <DIO_u8_SetPin_value+0x14c>
    1160:	a5 e3       	ldi	r26, 0x35	; 53
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e5 e3       	ldi	r30, 0x35	; 53
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_u8_SetPin_value+0x142>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_u8_SetPin_value+0x13e>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	43 c0       	rjmp	.+134    	; 0x120e <DIO_u8_SetPin_value+0x1d2>
    1188:	a5 e3       	ldi	r26, 0x35	; 53
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e5 e3       	ldi	r30, 0x35	; 53
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_u8_SetPin_value+0x16a>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_u8_SetPin_value+0x166>
    11aa:	80 95       	com	r24
    11ac:	84 23       	and	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	2e c0       	rjmp	.+92     	; 0x120e <DIO_u8_SetPin_value+0x1d2>
				break;

			case Group_D:
			ASSIGN_Bit(DIO_u8_PORTD, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	a1 f4       	brne	.+40     	; 0x11e0 <DIO_u8_SetPin_value+0x1a4>
    11b8:	a2 e3       	ldi	r26, 0x32	; 50
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e2 e3       	ldi	r30, 0x32	; 50
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_u8_SetPin_value+0x19a>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_u8_SetPin_value+0x196>
    11da:	84 2b       	or	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	17 c0       	rjmp	.+46     	; 0x120e <DIO_u8_SetPin_value+0x1d2>
    11e0:	a2 e3       	ldi	r26, 0x32	; 50
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e2 e3       	ldi	r30, 0x32	; 50
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_u8_SetPin_value+0x1c2>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_u8_SetPin_value+0x1be>
    1202:	80 95       	com	r24
    1204:	84 23       	and	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_u8_SetPin_value+0x1d2>
			break;

			default: return Invalid_u8_Error ;
    120a:	1c 82       	std	Y+4, r1	; 0x04
    120c:	06 c0       	rjmp	.+12     	; 0x121a <DIO_u8_SetPin_value+0x1de>
			}
		}else
             return Invalid_u8_Error ;
	}else
         return Invalid_u8_Error ;
	return Valid;
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	9c 83       	std	Y+4, r25	; 0x04
    1212:	03 c0       	rjmp	.+6      	; 0x121a <DIO_u8_SetPin_value+0x1de>
			break;

			default: return Invalid_u8_Error ;
			}
		}else
             return Invalid_u8_Error ;
    1214:	1c 82       	std	Y+4, r1	; 0x04
    1216:	01 c0       	rjmp	.+2      	; 0x121a <DIO_u8_SetPin_value+0x1de>
	}else
         return Invalid_u8_Error ;
    1218:	1c 82       	std	Y+4, r1	; 0x04
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
	return Valid;
}
    121c:	26 96       	adiw	r28, 0x06	; 6
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <DIO_u8_SetPin_Dir>:
u8 DIO_u8_SetPin_Dir(u8 Copy_u8_PortID,u8 Copy_u8_Pin_ID,u8 Copy_u8_Pin_Dir)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	00 d0       	rcall	.+0      	; 0x1234 <DIO_u8_SetPin_Dir+0x6>
    1234:	00 d0       	rcall	.+0      	; 0x1236 <DIO_u8_SetPin_Dir+0x8>
    1236:	00 d0       	rcall	.+0      	; 0x1238 <DIO_u8_SetPin_Dir+0xa>
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	6a 83       	std	Y+2, r22	; 0x02
    1240:	4b 83       	std	Y+3, r20	; 0x03

	if( (Copy_u8_Pin_ID >= 0) && (Copy_u8_Pin_ID <= 7) ){
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	88 30       	cpi	r24, 0x08	; 8
    1246:	08 f0       	brcs	.+2      	; 0x124a <DIO_u8_SetPin_Dir+0x1c>
    1248:	e0 c0       	rjmp	.+448    	; 0x140a <DIO_u8_SetPin_Dir+0x1dc>

		if((Copy_u8_Pin_Dir == DIO_u8_Input) || (Copy_u8_Pin_Dir == DIO_u8_Output)){
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	88 23       	and	r24, r24
    124e:	21 f0       	breq	.+8      	; 0x1258 <DIO_u8_SetPin_Dir+0x2a>
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	09 f0       	breq	.+2      	; 0x1258 <DIO_u8_SetPin_Dir+0x2a>
    1256:	d7 c0       	rjmp	.+430    	; 0x1406 <DIO_u8_SetPin_Dir+0x1d8>

			switch(Copy_u8_PortID){
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	3e 83       	std	Y+6, r19	; 0x06
    1260:	2d 83       	std	Y+5, r18	; 0x05
    1262:	8d 81       	ldd	r24, Y+5	; 0x05
    1264:	9e 81       	ldd	r25, Y+6	; 0x06
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	91 05       	cpc	r25, r1
    126a:	09 f4       	brne	.+2      	; 0x126e <DIO_u8_SetPin_Dir+0x40>
    126c:	43 c0       	rjmp	.+134    	; 0x12f4 <DIO_u8_SetPin_Dir+0xc6>
    126e:	2d 81       	ldd	r18, Y+5	; 0x05
    1270:	3e 81       	ldd	r19, Y+6	; 0x06
    1272:	22 30       	cpi	r18, 0x02	; 2
    1274:	31 05       	cpc	r19, r1
    1276:	2c f4       	brge	.+10     	; 0x1282 <DIO_u8_SetPin_Dir+0x54>
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	71 f0       	breq	.+28     	; 0x129c <DIO_u8_SetPin_Dir+0x6e>
    1280:	bd c0       	rjmp	.+378    	; 0x13fc <DIO_u8_SetPin_Dir+0x1ce>
    1282:	2d 81       	ldd	r18, Y+5	; 0x05
    1284:	3e 81       	ldd	r19, Y+6	; 0x06
    1286:	22 30       	cpi	r18, 0x02	; 2
    1288:	31 05       	cpc	r19, r1
    128a:	09 f4       	brne	.+2      	; 0x128e <DIO_u8_SetPin_Dir+0x60>
    128c:	5f c0       	rjmp	.+190    	; 0x134c <DIO_u8_SetPin_Dir+0x11e>
    128e:	8d 81       	ldd	r24, Y+5	; 0x05
    1290:	9e 81       	ldd	r25, Y+6	; 0x06
    1292:	83 30       	cpi	r24, 0x03	; 3
    1294:	91 05       	cpc	r25, r1
    1296:	09 f4       	brne	.+2      	; 0x129a <DIO_u8_SetPin_Dir+0x6c>
    1298:	85 c0       	rjmp	.+266    	; 0x13a4 <DIO_u8_SetPin_Dir+0x176>
    129a:	b0 c0       	rjmp	.+352    	; 0x13fc <DIO_u8_SetPin_Dir+0x1ce>

			case Group_A:
				ASSIGN_Bit(DIO_u8_DDRA, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	a1 f4       	brne	.+40     	; 0x12ca <DIO_u8_SetPin_Dir+0x9c>
    12a2:	aa e3       	ldi	r26, 0x3A	; 58
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	ea e3       	ldi	r30, 0x3A	; 58
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_u8_SetPin_Dir+0x92>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_u8_SetPin_Dir+0x8e>
    12c4:	84 2b       	or	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	9b c0       	rjmp	.+310    	; 0x1400 <DIO_u8_SetPin_Dir+0x1d2>
    12ca:	aa e3       	ldi	r26, 0x3A	; 58
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	ea e3       	ldi	r30, 0x3A	; 58
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_u8_SetPin_Dir+0xba>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_u8_SetPin_Dir+0xb6>
    12ec:	80 95       	com	r24
    12ee:	84 23       	and	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	86 c0       	rjmp	.+268    	; 0x1400 <DIO_u8_SetPin_Dir+0x1d2>
				break;

			case Group_B:
				ASSIGN_Bit(DIO_u8_DDRB, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	a1 f4       	brne	.+40     	; 0x1322 <DIO_u8_SetPin_Dir+0xf4>
    12fa:	a7 e3       	ldi	r26, 0x37	; 55
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e7 e3       	ldi	r30, 0x37	; 55
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_u8_SetPin_Dir+0xea>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_u8_SetPin_Dir+0xe6>
    131c:	84 2b       	or	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	6f c0       	rjmp	.+222    	; 0x1400 <DIO_u8_SetPin_Dir+0x1d2>
    1322:	a7 e3       	ldi	r26, 0x37	; 55
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e7 e3       	ldi	r30, 0x37	; 55
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_u8_SetPin_Dir+0x112>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_u8_SetPin_Dir+0x10e>
    1344:	80 95       	com	r24
    1346:	84 23       	and	r24, r20
    1348:	8c 93       	st	X, r24
    134a:	5a c0       	rjmp	.+180    	; 0x1400 <DIO_u8_SetPin_Dir+0x1d2>
				break;

			case Group_C:
				ASSIGN_Bit(DIO_u8_DDRC, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	a1 f4       	brne	.+40     	; 0x137a <DIO_u8_SetPin_Dir+0x14c>
    1352:	a4 e3       	ldi	r26, 0x34	; 52
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e4 e3       	ldi	r30, 0x34	; 52
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 2e       	mov	r0, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <DIO_u8_SetPin_Dir+0x142>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	0a 94       	dec	r0
    1372:	e2 f7       	brpl	.-8      	; 0x136c <DIO_u8_SetPin_Dir+0x13e>
    1374:	84 2b       	or	r24, r20
    1376:	8c 93       	st	X, r24
    1378:	43 c0       	rjmp	.+134    	; 0x1400 <DIO_u8_SetPin_Dir+0x1d2>
    137a:	a4 e3       	ldi	r26, 0x34	; 52
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e4 e3       	ldi	r30, 0x34	; 52
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 2e       	mov	r0, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <DIO_u8_SetPin_Dir+0x16a>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <DIO_u8_SetPin_Dir+0x166>
    139c:	80 95       	com	r24
    139e:	84 23       	and	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	2e c0       	rjmp	.+92     	; 0x1400 <DIO_u8_SetPin_Dir+0x1d2>
				break;

			case Group_D:
			ASSIGN_Bit(DIO_u8_DDRD, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	a1 f4       	brne	.+40     	; 0x13d2 <DIO_u8_SetPin_Dir+0x1a4>
    13aa:	a1 e3       	ldi	r26, 0x31	; 49
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e1 e3       	ldi	r30, 0x31	; 49
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	02 2e       	mov	r0, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_u8_SetPin_Dir+0x19a>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_u8_SetPin_Dir+0x196>
    13cc:	84 2b       	or	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	17 c0       	rjmp	.+46     	; 0x1400 <DIO_u8_SetPin_Dir+0x1d2>
    13d2:	a1 e3       	ldi	r26, 0x31	; 49
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e1 e3       	ldi	r30, 0x31	; 49
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_u8_SetPin_Dir+0x1c2>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_u8_SetPin_Dir+0x1be>
    13f4:	80 95       	com	r24
    13f6:	84 23       	and	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_u8_SetPin_Dir+0x1d2>
			break;

			default: return Invalid_u8_Error;
    13fc:	1c 82       	std	Y+4, r1	; 0x04
    13fe:	06 c0       	rjmp	.+12     	; 0x140c <DIO_u8_SetPin_Dir+0x1de>
		}else
			return Invalid_u8_Error;
	}else
		return Invalid_u8_Error;

	return Valid;
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	9c 83       	std	Y+4, r25	; 0x04
    1404:	03 c0       	rjmp	.+6      	; 0x140c <DIO_u8_SetPin_Dir+0x1de>
			break;

			default: return Invalid_u8_Error;
			}
		}else
			return Invalid_u8_Error;
    1406:	1c 82       	std	Y+4, r1	; 0x04
    1408:	01 c0       	rjmp	.+2      	; 0x140c <DIO_u8_SetPin_Dir+0x1de>
	}else
		return Invalid_u8_Error;
    140a:	1c 82       	std	Y+4, r1	; 0x04
    140c:	8c 81       	ldd	r24, Y+4	; 0x04

	return Valid;
}
    140e:	26 96       	adiw	r28, 0x06	; 6
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <DIO_u8_SetPort_value>:

u8 DIO_u8_SetPort_value(u8 Copy_u8_PortID, u8 Copy_u8_Port_Val)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <DIO_u8_SetPort_value+0x6>
    1426:	00 d0       	rcall	.+0      	; 0x1428 <DIO_u8_SetPort_value+0x8>
    1428:	0f 92       	push	r0
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortID)
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	3d 83       	std	Y+5, r19	; 0x05
    143a:	2c 83       	std	Y+4, r18	; 0x04
    143c:	8c 81       	ldd	r24, Y+4	; 0x04
    143e:	9d 81       	ldd	r25, Y+5	; 0x05
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	91 05       	cpc	r25, r1
    1444:	d1 f0       	breq	.+52     	; 0x147a <DIO_u8_SetPort_value+0x5a>
    1446:	2c 81       	ldd	r18, Y+4	; 0x04
    1448:	3d 81       	ldd	r19, Y+5	; 0x05
    144a:	22 30       	cpi	r18, 0x02	; 2
    144c:	31 05       	cpc	r19, r1
    144e:	2c f4       	brge	.+10     	; 0x145a <DIO_u8_SetPort_value+0x3a>
    1450:	8c 81       	ldd	r24, Y+4	; 0x04
    1452:	9d 81       	ldd	r25, Y+5	; 0x05
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	61 f0       	breq	.+24     	; 0x1470 <DIO_u8_SetPort_value+0x50>
    1458:	1f c0       	rjmp	.+62     	; 0x1498 <DIO_u8_SetPort_value+0x78>
    145a:	2c 81       	ldd	r18, Y+4	; 0x04
    145c:	3d 81       	ldd	r19, Y+5	; 0x05
    145e:	22 30       	cpi	r18, 0x02	; 2
    1460:	31 05       	cpc	r19, r1
    1462:	81 f0       	breq	.+32     	; 0x1484 <DIO_u8_SetPort_value+0x64>
    1464:	8c 81       	ldd	r24, Y+4	; 0x04
    1466:	9d 81       	ldd	r25, Y+5	; 0x05
    1468:	83 30       	cpi	r24, 0x03	; 3
    146a:	91 05       	cpc	r25, r1
    146c:	81 f0       	breq	.+32     	; 0x148e <DIO_u8_SetPort_value+0x6e>
    146e:	14 c0       	rjmp	.+40     	; 0x1498 <DIO_u8_SetPort_value+0x78>
	{
	case Group_A: DIO_u8_PORTA = Copy_u8_Port_Val;
    1470:	eb e3       	ldi	r30, 0x3B	; 59
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	80 83       	st	Z, r24
    1478:	11 c0       	rjmp	.+34     	; 0x149c <DIO_u8_SetPort_value+0x7c>
			break;
	case Group_B: DIO_u8_PORTB = Copy_u8_Port_Val;
    147a:	e8 e3       	ldi	r30, 0x38	; 56
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	80 83       	st	Z, r24
    1482:	0c c0       	rjmp	.+24     	; 0x149c <DIO_u8_SetPort_value+0x7c>
			break;
	case Group_C: DIO_u8_PORTC = Copy_u8_Port_Val;
    1484:	e5 e3       	ldi	r30, 0x35	; 53
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	80 83       	st	Z, r24
    148c:	07 c0       	rjmp	.+14     	; 0x149c <DIO_u8_SetPort_value+0x7c>
			break;
	case Group_D: DIO_u8_PORTD = Copy_u8_Port_Val;
    148e:	e2 e3       	ldi	r30, 0x32	; 50
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	80 83       	st	Z, r24
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_u8_SetPort_value+0x7c>
			break;
	default: return Invalid_u8_Error ;
    1498:	1b 82       	std	Y+3, r1	; 0x03
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <DIO_u8_SetPort_value+0x80>
	}
	return Valid;
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	9b 83       	std	Y+3, r25	; 0x03
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <DIO_u8_SetPort_Dir>:

u8 DIO_u8_SetPort_Dir(u8 Copy_u8_PortID, u8 Copy_u8_Port_Dir)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <DIO_u8_SetPort_Dir+0x6>
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <DIO_u8_SetPort_Dir+0x8>
    14ba:	0f 92       	push	r0
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortID)
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	3d 83       	std	Y+5, r19	; 0x05
    14cc:	2c 83       	std	Y+4, r18	; 0x04
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	9d 81       	ldd	r25, Y+5	; 0x05
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	91 05       	cpc	r25, r1
    14d6:	d1 f0       	breq	.+52     	; 0x150c <DIO_u8_SetPort_Dir+0x5a>
    14d8:	2c 81       	ldd	r18, Y+4	; 0x04
    14da:	3d 81       	ldd	r19, Y+5	; 0x05
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	31 05       	cpc	r19, r1
    14e0:	2c f4       	brge	.+10     	; 0x14ec <DIO_u8_SetPort_Dir+0x3a>
    14e2:	8c 81       	ldd	r24, Y+4	; 0x04
    14e4:	9d 81       	ldd	r25, Y+5	; 0x05
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	61 f0       	breq	.+24     	; 0x1502 <DIO_u8_SetPort_Dir+0x50>
    14ea:	1f c0       	rjmp	.+62     	; 0x152a <DIO_u8_SetPort_Dir+0x78>
    14ec:	2c 81       	ldd	r18, Y+4	; 0x04
    14ee:	3d 81       	ldd	r19, Y+5	; 0x05
    14f0:	22 30       	cpi	r18, 0x02	; 2
    14f2:	31 05       	cpc	r19, r1
    14f4:	81 f0       	breq	.+32     	; 0x1516 <DIO_u8_SetPort_Dir+0x64>
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	9d 81       	ldd	r25, Y+5	; 0x05
    14fa:	83 30       	cpi	r24, 0x03	; 3
    14fc:	91 05       	cpc	r25, r1
    14fe:	81 f0       	breq	.+32     	; 0x1520 <DIO_u8_SetPort_Dir+0x6e>
    1500:	14 c0       	rjmp	.+40     	; 0x152a <DIO_u8_SetPort_Dir+0x78>
	{
	case Group_A: DIO_u8_DDRA = Copy_u8_Port_Dir;
    1502:	ea e3       	ldi	r30, 0x3A	; 58
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	80 83       	st	Z, r24
    150a:	11 c0       	rjmp	.+34     	; 0x152e <DIO_u8_SetPort_Dir+0x7c>
			break;
	case Group_B: DIO_u8_DDRB = Copy_u8_Port_Dir;
    150c:	e7 e3       	ldi	r30, 0x37	; 55
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	80 83       	st	Z, r24
    1514:	0c c0       	rjmp	.+24     	; 0x152e <DIO_u8_SetPort_Dir+0x7c>
			break;
	case Group_C: DIO_u8_DDRC = Copy_u8_Port_Dir;
    1516:	e4 e3       	ldi	r30, 0x34	; 52
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	80 83       	st	Z, r24
    151e:	07 c0       	rjmp	.+14     	; 0x152e <DIO_u8_SetPort_Dir+0x7c>
			break;
	case Group_D: DIO_u8_DDRD = Copy_u8_Port_Dir;
    1520:	e1 e3       	ldi	r30, 0x31	; 49
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	80 83       	st	Z, r24
    1528:	02 c0       	rjmp	.+4      	; 0x152e <DIO_u8_SetPort_Dir+0x7c>
			break;
	default: return Invalid_u8_Error ;
    152a:	1b 82       	std	Y+3, r1	; 0x03
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <DIO_u8_SetPort_Dir+0x80>
	}

	return Valid;
    152e:	91 e0       	ldi	r25, 0x01	; 1
    1530:	9b 83       	std	Y+3, r25	; 0x03
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <DIO_u8_GetPin_value>:

u8 DIO_u8_GetPin_value(u8 Copy_u8_PortID,u8 Copy_u8_Pin_ID, u8 *Copy_Pu8_u8_Pin_Val)
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	27 97       	sbiw	r28, 0x07	; 7
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	6a 83       	std	Y+2, r22	; 0x02
    155c:	5c 83       	std	Y+4, r21	; 0x04
    155e:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8_PortID)
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	3f 83       	std	Y+7, r19	; 0x07
    1568:	2e 83       	std	Y+6, r18	; 0x06
    156a:	4e 81       	ldd	r20, Y+6	; 0x06
    156c:	5f 81       	ldd	r21, Y+7	; 0x07
    156e:	41 30       	cpi	r20, 0x01	; 1
    1570:	51 05       	cpc	r21, r1
    1572:	59 f1       	breq	.+86     	; 0x15ca <DIO_u8_GetPin_value+0x86>
    1574:	8e 81       	ldd	r24, Y+6	; 0x06
    1576:	9f 81       	ldd	r25, Y+7	; 0x07
    1578:	82 30       	cpi	r24, 0x02	; 2
    157a:	91 05       	cpc	r25, r1
    157c:	34 f4       	brge	.+12     	; 0x158a <DIO_u8_GetPin_value+0x46>
    157e:	2e 81       	ldd	r18, Y+6	; 0x06
    1580:	3f 81       	ldd	r19, Y+7	; 0x07
    1582:	21 15       	cp	r18, r1
    1584:	31 05       	cpc	r19, r1
    1586:	69 f0       	breq	.+26     	; 0x15a2 <DIO_u8_GetPin_value+0x5e>
    1588:	5c c0       	rjmp	.+184    	; 0x1642 <DIO_u8_GetPin_value+0xfe>
    158a:	4e 81       	ldd	r20, Y+6	; 0x06
    158c:	5f 81       	ldd	r21, Y+7	; 0x07
    158e:	42 30       	cpi	r20, 0x02	; 2
    1590:	51 05       	cpc	r21, r1
    1592:	79 f1       	breq	.+94     	; 0x15f2 <DIO_u8_GetPin_value+0xae>
    1594:	8e 81       	ldd	r24, Y+6	; 0x06
    1596:	9f 81       	ldd	r25, Y+7	; 0x07
    1598:	83 30       	cpi	r24, 0x03	; 3
    159a:	91 05       	cpc	r25, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <DIO_u8_GetPin_value+0x5c>
    159e:	3d c0       	rjmp	.+122    	; 0x161a <DIO_u8_GetPin_value+0xd6>
    15a0:	50 c0       	rjmp	.+160    	; 0x1642 <DIO_u8_GetPin_value+0xfe>
	{
	case Group_A: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PINA,Copy_u8_Pin_ID);
    15a2:	e9 e3       	ldi	r30, 0x39	; 57
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	a9 01       	movw	r20, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <DIO_u8_GetPin_value+0x76>
    15b6:	55 95       	asr	r21
    15b8:	47 95       	ror	r20
    15ba:	8a 95       	dec	r24
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <DIO_u8_GetPin_value+0x72>
    15be:	ca 01       	movw	r24, r20
    15c0:	81 70       	andi	r24, 0x01	; 1
    15c2:	eb 81       	ldd	r30, Y+3	; 0x03
    15c4:	fc 81       	ldd	r31, Y+4	; 0x04
    15c6:	80 83       	st	Z, r24
    15c8:	3e c0       	rjmp	.+124    	; 0x1646 <DIO_u8_GetPin_value+0x102>
			break;
	case Group_B: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PINB,Copy_u8_Pin_ID);
    15ca:	e6 e3       	ldi	r30, 0x36	; 54
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	88 2f       	mov	r24, r24
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	a9 01       	movw	r20, r18
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <DIO_u8_GetPin_value+0x9e>
    15de:	55 95       	asr	r21
    15e0:	47 95       	ror	r20
    15e2:	8a 95       	dec	r24
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <DIO_u8_GetPin_value+0x9a>
    15e6:	ca 01       	movw	r24, r20
    15e8:	81 70       	andi	r24, 0x01	; 1
    15ea:	eb 81       	ldd	r30, Y+3	; 0x03
    15ec:	fc 81       	ldd	r31, Y+4	; 0x04
    15ee:	80 83       	st	Z, r24
    15f0:	2a c0       	rjmp	.+84     	; 0x1646 <DIO_u8_GetPin_value+0x102>
			break;
	case Group_C: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PINC,Copy_u8_Pin_ID);
    15f2:	e3 e3       	ldi	r30, 0x33	; 51
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	88 2f       	mov	r24, r24
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a9 01       	movw	r20, r18
    1604:	02 c0       	rjmp	.+4      	; 0x160a <DIO_u8_GetPin_value+0xc6>
    1606:	55 95       	asr	r21
    1608:	47 95       	ror	r20
    160a:	8a 95       	dec	r24
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <DIO_u8_GetPin_value+0xc2>
    160e:	ca 01       	movw	r24, r20
    1610:	81 70       	andi	r24, 0x01	; 1
    1612:	eb 81       	ldd	r30, Y+3	; 0x03
    1614:	fc 81       	ldd	r31, Y+4	; 0x04
    1616:	80 83       	st	Z, r24
    1618:	16 c0       	rjmp	.+44     	; 0x1646 <DIO_u8_GetPin_value+0x102>
			break;
	case Group_D: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PIND,Copy_u8_Pin_ID);
    161a:	e0 e3       	ldi	r30, 0x30	; 48
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	88 2f       	mov	r24, r24
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	a9 01       	movw	r20, r18
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <DIO_u8_GetPin_value+0xee>
    162e:	55 95       	asr	r21
    1630:	47 95       	ror	r20
    1632:	8a 95       	dec	r24
    1634:	e2 f7       	brpl	.-8      	; 0x162e <DIO_u8_GetPin_value+0xea>
    1636:	ca 01       	movw	r24, r20
    1638:	81 70       	andi	r24, 0x01	; 1
    163a:	eb 81       	ldd	r30, Y+3	; 0x03
    163c:	fc 81       	ldd	r31, Y+4	; 0x04
    163e:	80 83       	st	Z, r24
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <DIO_u8_GetPin_value+0x102>
			break;
	default: return Invalid_u8_Error ;
    1642:	1d 82       	std	Y+5, r1	; 0x05
    1644:	02 c0       	rjmp	.+4      	; 0x164a <DIO_u8_GetPin_value+0x106>
	}
	return Valid;
    1646:	51 e0       	ldi	r21, 0x01	; 1
    1648:	5d 83       	std	Y+5, r21	; 0x05
    164a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    164c:	27 96       	adiw	r28, 0x07	; 7
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <DIO_u8_GetPort_value>:

u8 DIO_u8_GetPort_value(u8 Copy_u8_PortID, u8 *Copy_Pu8_u8_Pin_Val)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <DIO_u8_GetPort_value+0x6>
    1664:	00 d0       	rcall	.+0      	; 0x1666 <DIO_u8_GetPort_value+0x8>
    1666:	00 d0       	rcall	.+0      	; 0x1668 <DIO_u8_GetPort_value+0xa>
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	7b 83       	std	Y+3, r23	; 0x03
    1670:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortID)
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	3e 83       	std	Y+6, r19	; 0x06
    167a:	2d 83       	std	Y+5, r18	; 0x05
    167c:	8d 81       	ldd	r24, Y+5	; 0x05
    167e:	9e 81       	ldd	r25, Y+6	; 0x06
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	91 05       	cpc	r25, r1
    1684:	e1 f0       	breq	.+56     	; 0x16be <DIO_u8_GetPort_value+0x60>
    1686:	2d 81       	ldd	r18, Y+5	; 0x05
    1688:	3e 81       	ldd	r19, Y+6	; 0x06
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	2c f4       	brge	.+10     	; 0x169a <DIO_u8_GetPort_value+0x3c>
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	9e 81       	ldd	r25, Y+6	; 0x06
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	61 f0       	breq	.+24     	; 0x16b0 <DIO_u8_GetPort_value+0x52>
    1698:	27 c0       	rjmp	.+78     	; 0x16e8 <DIO_u8_GetPort_value+0x8a>
    169a:	2d 81       	ldd	r18, Y+5	; 0x05
    169c:	3e 81       	ldd	r19, Y+6	; 0x06
    169e:	22 30       	cpi	r18, 0x02	; 2
    16a0:	31 05       	cpc	r19, r1
    16a2:	a1 f0       	breq	.+40     	; 0x16cc <DIO_u8_GetPort_value+0x6e>
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	9e 81       	ldd	r25, Y+6	; 0x06
    16a8:	83 30       	cpi	r24, 0x03	; 3
    16aa:	91 05       	cpc	r25, r1
    16ac:	b1 f0       	breq	.+44     	; 0x16da <DIO_u8_GetPort_value+0x7c>
    16ae:	1c c0       	rjmp	.+56     	; 0x16e8 <DIO_u8_GetPort_value+0x8a>
	{
	case Group_A: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTA;
    16b0:	eb e3       	ldi	r30, 0x3B	; 59
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	ea 81       	ldd	r30, Y+2	; 0x02
    16b8:	fb 81       	ldd	r31, Y+3	; 0x03
    16ba:	80 83       	st	Z, r24
    16bc:	17 c0       	rjmp	.+46     	; 0x16ec <DIO_u8_GetPort_value+0x8e>
			break;
	case Group_B: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTB;
    16be:	e8 e3       	ldi	r30, 0x38	; 56
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	ea 81       	ldd	r30, Y+2	; 0x02
    16c6:	fb 81       	ldd	r31, Y+3	; 0x03
    16c8:	80 83       	st	Z, r24
    16ca:	10 c0       	rjmp	.+32     	; 0x16ec <DIO_u8_GetPort_value+0x8e>
			break;
	case Group_C: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTC;
    16cc:	e5 e3       	ldi	r30, 0x35	; 53
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	ea 81       	ldd	r30, Y+2	; 0x02
    16d4:	fb 81       	ldd	r31, Y+3	; 0x03
    16d6:	80 83       	st	Z, r24
    16d8:	09 c0       	rjmp	.+18     	; 0x16ec <DIO_u8_GetPort_value+0x8e>
			break;
	case Group_D: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTD;
    16da:	e2 e3       	ldi	r30, 0x32	; 50
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	ea 81       	ldd	r30, Y+2	; 0x02
    16e2:	fb 81       	ldd	r31, Y+3	; 0x03
    16e4:	80 83       	st	Z, r24
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <DIO_u8_GetPort_value+0x8e>
			break;
	default: return Invalid_u8_Error ;
    16e8:	1c 82       	std	Y+4, r1	; 0x04
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <DIO_u8_GetPort_value+0x92>
	}
	return Valid;
    16ec:	91 e0       	ldi	r25, 0x01	; 1
    16ee:	9c 83       	std	Y+4, r25	; 0x04
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    16f2:	26 96       	adiw	r28, 0x06	; 6
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <GIE_voidEnable>:
#include"BIT_CALC.h"
#include"GIE_Private.h"
#include"GIE_Interface.h"

void GIE_voidEnable(void)
{
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    170c:	af e5       	ldi	r26, 0x5F	; 95
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	ef e5       	ldi	r30, 0x5F	; 95
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	80 68       	ori	r24, 0x80	; 128
    1718:	8c 93       	st	X, r24
}
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1728:	af e5       	ldi	r26, 0x5F	; 95
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	ef e5       	ldi	r30, 0x5F	; 95
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	8f 77       	andi	r24, 0x7F	; 127
    1734:	8c 93       	st	X, r24
}
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret

0000173c <ID_PASS>:
#include "M_C_H_Interface.h"
#include "Timer_interface.h"


void ID_PASS(void)
{
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	c3 54       	subi	r28, 0x43	; 67
    1746:	d0 40       	sbci	r29, 0x00	; 0
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61

	DIO_u8_SetPin_value(Group_A,DIO_u8_Pin_6,DIO_u8_Low);
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	66 e0       	ldi	r22, 0x06	; 6
    1756:	40 e0       	ldi	r20, 0x00	; 0
    1758:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_u8_SetPin_value>

	//Array to Store ID to compare password
	char Arr_u8ID[4];

	//Array to Store Pass to compare with ID if It write or wrong
	char Arr_u8Pass[4], IteratorPass=0;
    175c:	1c a6       	std	Y+44, r1	; 0x2c

	//Variable make 3 tries only to Enter password
	u8 Wrong_u8Pass = 3;
    175e:	83 e0       	ldi	r24, 0x03	; 3
    1760:	8b a7       	std	Y+43, r24	; 0x2b

	//7Segment Array to display Numbers*
	u8 NUMBERS [10] = {zero, one, two, three, four, five, six, seven, eight, nine};
    1762:	ce 01       	movw	r24, r28
    1764:	c5 96       	adiw	r24, 0x35	; 53
    1766:	21 96       	adiw	r28, 0x01	; 1
    1768:	9f af       	std	Y+63, r25	; 0x3f
    176a:	8e af       	std	Y+62, r24	; 0x3e
    176c:	21 97       	sbiw	r28, 0x01	; 1
    176e:	eb e9       	ldi	r30, 0x9B	; 155
    1770:	f2 e0       	ldi	r31, 0x02	; 2
    1772:	23 96       	adiw	r28, 0x03	; 3
    1774:	ff af       	std	Y+63, r31	; 0x3f
    1776:	ee af       	std	Y+62, r30	; 0x3e
    1778:	23 97       	sbiw	r28, 0x03	; 3
    177a:	fa e0       	ldi	r31, 0x0A	; 10
    177c:	24 96       	adiw	r28, 0x04	; 4
    177e:	ff af       	std	Y+63, r31	; 0x3f
    1780:	24 97       	sbiw	r28, 0x04	; 4
    1782:	23 96       	adiw	r28, 0x03	; 3
    1784:	ee ad       	ldd	r30, Y+62	; 0x3e
    1786:	ff ad       	ldd	r31, Y+63	; 0x3f
    1788:	23 97       	sbiw	r28, 0x03	; 3
    178a:	00 80       	ld	r0, Z
    178c:	23 96       	adiw	r28, 0x03	; 3
    178e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1790:	9f ad       	ldd	r25, Y+63	; 0x3f
    1792:	23 97       	sbiw	r28, 0x03	; 3
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	23 96       	adiw	r28, 0x03	; 3
    1798:	9f af       	std	Y+63, r25	; 0x3f
    179a:	8e af       	std	Y+62, r24	; 0x3e
    179c:	23 97       	sbiw	r28, 0x03	; 3
    179e:	21 96       	adiw	r28, 0x01	; 1
    17a0:	ee ad       	ldd	r30, Y+62	; 0x3e
    17a2:	ff ad       	ldd	r31, Y+63	; 0x3f
    17a4:	21 97       	sbiw	r28, 0x01	; 1
    17a6:	00 82       	st	Z, r0
    17a8:	21 96       	adiw	r28, 0x01	; 1
    17aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    17ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    17ae:	21 97       	sbiw	r28, 0x01	; 1
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	21 96       	adiw	r28, 0x01	; 1
    17b4:	9f af       	std	Y+63, r25	; 0x3f
    17b6:	8e af       	std	Y+62, r24	; 0x3e
    17b8:	21 97       	sbiw	r28, 0x01	; 1
    17ba:	24 96       	adiw	r28, 0x04	; 4
    17bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    17be:	24 97       	sbiw	r28, 0x04	; 4
    17c0:	91 50       	subi	r25, 0x01	; 1
    17c2:	24 96       	adiw	r28, 0x04	; 4
    17c4:	9f af       	std	Y+63, r25	; 0x3f
    17c6:	24 97       	sbiw	r28, 0x04	; 4
    17c8:	24 96       	adiw	r28, 0x04	; 4
    17ca:	ef ad       	ldd	r30, Y+63	; 0x3f
    17cc:	24 97       	sbiw	r28, 0x04	; 4
    17ce:	ee 23       	and	r30, r30
    17d0:	c1 f6       	brne	.-80     	; 0x1782 <ID_PASS+0x46>

	//First display on screen welocm for 0.5 seconds
	USART_vSendString("\rWelcome");
    17d2:	80 e6       	ldi	r24, 0x60	; 96
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

	//Ask user to Enter ID
	USART_vSendString("\rEnter ID:");
    17da:	89 e6       	ldi	r24, 0x69	; 105
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

	while(1)
	{

		USART_vReceiveString(Arr_u8ID);
    17e2:	ce 01       	movw	r24, r28
    17e4:	8d 96       	adiw	r24, 0x2d	; 45
    17e6:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <USART_vReceiveString>

		USART_vSendString("\rPASS:");
    17ea:	84 e7       	ldi	r24, 0x74	; 116
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
		DIO_u8_SetPin_value(Group_A,DIO_u8_Pin_6,DIO_u8_High);
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	66 e0       	ldi	r22, 0x06	; 6
    17f6:	41 e0       	ldi	r20, 0x01	; 1
    17f8:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_u8_SetPin_value>

		Segment7_VidSetDisplay(NUMBERS[Wrong_u8Pass]);
    17fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	ce 01       	movw	r24, r28
    1804:	c5 96       	adiw	r24, 0x35	; 53
    1806:	fc 01       	movw	r30, r24
    1808:	e2 0f       	add	r30, r18
    180a:	f3 1f       	adc	r31, r19
    180c:	80 81       	ld	r24, Z
    180e:	0e 94 0e 11 	call	0x221c	; 0x221c <Segment7_VidSetDisplay>

		//new Busy waiting to wait user to enter Right Password
		while(1)
		{
			USART_vReceiveString(Arr_u8Pass);
    1812:	ce 01       	movw	r24, r28
    1814:	c1 96       	adiw	r24, 0x31	; 49
    1816:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <USART_vReceiveString>

			if(Arr_u8Pass[3]==Arr_u8ID[0] && Arr_u8Pass[2]==Arr_u8ID[1] && Arr_u8Pass[1]==Arr_u8ID[2] && Arr_u8Pass[0]==Arr_u8ID[3])
    181a:	9c a9       	ldd	r25, Y+52	; 0x34
    181c:	8d a5       	ldd	r24, Y+45	; 0x2d
    181e:	98 17       	cp	r25, r24
    1820:	b9 f4       	brne	.+46     	; 0x1850 <ID_PASS+0x114>
    1822:	9b a9       	ldd	r25, Y+51	; 0x33
    1824:	8e a5       	ldd	r24, Y+46	; 0x2e
    1826:	98 17       	cp	r25, r24
    1828:	99 f4       	brne	.+38     	; 0x1850 <ID_PASS+0x114>
    182a:	9a a9       	ldd	r25, Y+50	; 0x32
    182c:	8f a5       	ldd	r24, Y+47	; 0x2f
    182e:	98 17       	cp	r25, r24
    1830:	79 f4       	brne	.+30     	; 0x1850 <ID_PASS+0x114>
    1832:	99 a9       	ldd	r25, Y+49	; 0x31
    1834:	88 a9       	ldd	r24, Y+48	; 0x30
    1836:	98 17       	cp	r25, r24
    1838:	59 f4       	brne	.+22     	; 0x1850 <ID_PASS+0x114>
			{
				Segment7_VidDisableDisplayOne();
    183a:	0e 94 3f 11 	call	0x227e	; 0x227e <Segment7_VidDisableDisplayOne>

				USART_vSendString("\r\rWELCOME To Your Smart Home...");
    183e:	8b e7       	ldi	r24, 0x7B	; 123
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
				TIM1_voidDisable();
    1846:	0e 94 06 12 	call	0x240c	; 0x240c <TIM1_voidDisable>

				MainMenu();
    184a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <MainMenu>
    184e:	e1 cf       	rjmp	.-62     	; 0x1812 <ID_PASS+0xd6>
			}else
			{
				Wrong_u8Pass--;
    1850:	8b a5       	ldd	r24, Y+43	; 0x2b
    1852:	81 50       	subi	r24, 0x01	; 1
    1854:	8b a7       	std	Y+43, r24	; 0x2b
				if(Wrong_u8Pass == 0)
    1856:	8b a5       	ldd	r24, Y+43	; 0x2b
    1858:	88 23       	and	r24, r24
    185a:	09 f0       	breq	.+2      	; 0x185e <ID_PASS+0x122>
    185c:	85 c1       	rjmp	.+778    	; 0x1b68 <ID_PASS+0x42c>
				{

					Segment7_VidSetDisplay(NUMBERS[Wrong_u8Pass]);
    185e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	ce 01       	movw	r24, r28
    1866:	c5 96       	adiw	r24, 0x35	; 53
    1868:	fc 01       	movw	r30, r24
    186a:	e2 0f       	add	r30, r18
    186c:	f3 1f       	adc	r31, r19
    186e:	80 81       	ld	r24, Z
    1870:	0e 94 0e 11 	call	0x221c	; 0x221c <Segment7_VidSetDisplay>
					USART_vSendString("\rBye bebooo");
    1874:	8b e9       	ldi	r24, 0x9B	; 155
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
					DIO_u8_SetPin_value(Group_D,DIO_u8_Pin_2,DIO_u8_High);
    187c:	83 e0       	ldi	r24, 0x03	; 3
    187e:	62 e0       	ldi	r22, 0x02	; 2
    1880:	41 e0       	ldi	r20, 0x01	; 1
    1882:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_u8_SetPin_value>
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	aa ef       	ldi	r26, 0xFA	; 250
    188c:	b3 e4       	ldi	r27, 0x43	; 67
    188e:	8f a3       	std	Y+39, r24	; 0x27
    1890:	98 a7       	std	Y+40, r25	; 0x28
    1892:	a9 a7       	std	Y+41, r26	; 0x29
    1894:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1896:	6f a1       	ldd	r22, Y+39	; 0x27
    1898:	78 a5       	ldd	r23, Y+40	; 0x28
    189a:	89 a5       	ldd	r24, Y+41	; 0x29
    189c:	9a a5       	ldd	r25, Y+42	; 0x2a
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	4a ef       	ldi	r20, 0xFA	; 250
    18a4:	54 e4       	ldi	r21, 0x44	; 68
    18a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	8b a3       	std	Y+35, r24	; 0x23
    18b0:	9c a3       	std	Y+36, r25	; 0x24
    18b2:	ad a3       	std	Y+37, r26	; 0x25
    18b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18b6:	6b a1       	ldd	r22, Y+35	; 0x23
    18b8:	7c a1       	ldd	r23, Y+36	; 0x24
    18ba:	8d a1       	ldd	r24, Y+37	; 0x25
    18bc:	9e a1       	ldd	r25, Y+38	; 0x26
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e8       	ldi	r20, 0x80	; 128
    18c4:	5f e3       	ldi	r21, 0x3F	; 63
    18c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ca:	88 23       	and	r24, r24
    18cc:	2c f4       	brge	.+10     	; 0x18d8 <ID_PASS+0x19c>
		__ticks = 1;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9a a3       	std	Y+34, r25	; 0x22
    18d4:	89 a3       	std	Y+33, r24	; 0x21
    18d6:	3f c0       	rjmp	.+126    	; 0x1956 <ID_PASS+0x21a>
	else if (__tmp > 65535)
    18d8:	6b a1       	ldd	r22, Y+35	; 0x23
    18da:	7c a1       	ldd	r23, Y+36	; 0x24
    18dc:	8d a1       	ldd	r24, Y+37	; 0x25
    18de:	9e a1       	ldd	r25, Y+38	; 0x26
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	4f e7       	ldi	r20, 0x7F	; 127
    18e6:	57 e4       	ldi	r21, 0x47	; 71
    18e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ec:	18 16       	cp	r1, r24
    18ee:	4c f5       	brge	.+82     	; 0x1942 <ID_PASS+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f0:	6f a1       	ldd	r22, Y+39	; 0x27
    18f2:	78 a5       	ldd	r23, Y+40	; 0x28
    18f4:	89 a5       	ldd	r24, Y+41	; 0x29
    18f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e2       	ldi	r20, 0x20	; 32
    18fe:	51 e4       	ldi	r21, 0x41	; 65
    1900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	bc 01       	movw	r22, r24
    190a:	cd 01       	movw	r24, r26
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9a a3       	std	Y+34, r25	; 0x22
    1916:	89 a3       	std	Y+33, r24	; 0x21
    1918:	0f c0       	rjmp	.+30     	; 0x1938 <ID_PASS+0x1fc>
    191a:	88 ec       	ldi	r24, 0xC8	; 200
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	98 a3       	std	Y+32, r25	; 0x20
    1920:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1922:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1924:	98 a1       	ldd	r25, Y+32	; 0x20
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <ID_PASS+0x1ea>
    192a:	98 a3       	std	Y+32, r25	; 0x20
    192c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192e:	89 a1       	ldd	r24, Y+33	; 0x21
    1930:	9a a1       	ldd	r25, Y+34	; 0x22
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	9a a3       	std	Y+34, r25	; 0x22
    1936:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1938:	89 a1       	ldd	r24, Y+33	; 0x21
    193a:	9a a1       	ldd	r25, Y+34	; 0x22
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	69 f7       	brne	.-38     	; 0x191a <ID_PASS+0x1de>
    1940:	14 c0       	rjmp	.+40     	; 0x196a <ID_PASS+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1942:	6b a1       	ldd	r22, Y+35	; 0x23
    1944:	7c a1       	ldd	r23, Y+36	; 0x24
    1946:	8d a1       	ldd	r24, Y+37	; 0x25
    1948:	9e a1       	ldd	r25, Y+38	; 0x26
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9a a3       	std	Y+34, r25	; 0x22
    1954:	89 a3       	std	Y+33, r24	; 0x21
    1956:	89 a1       	ldd	r24, Y+33	; 0x21
    1958:	9a a1       	ldd	r25, Y+34	; 0x22
    195a:	9e 8f       	std	Y+30, r25	; 0x1e
    195c:	8d 8f       	std	Y+29, r24	; 0x1d
    195e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1960:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <ID_PASS+0x226>
    1966:	9e 8f       	std	Y+30, r25	; 0x1e
    1968:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(500);
					DIO_u8_SetPin_value(Group_D,DIO_u8_Pin_2,DIO_u8_Low);
    196a:	83 e0       	ldi	r24, 0x03	; 3
    196c:	62 e0       	ldi	r22, 0x02	; 2
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_u8_SetPin_value>
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	aa ef       	ldi	r26, 0xFA	; 250
    197a:	b3 e4       	ldi	r27, 0x43	; 67
    197c:	89 8f       	std	Y+25, r24	; 0x19
    197e:	9a 8f       	std	Y+26, r25	; 0x1a
    1980:	ab 8f       	std	Y+27, r26	; 0x1b
    1982:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1984:	69 8d       	ldd	r22, Y+25	; 0x19
    1986:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1988:	8b 8d       	ldd	r24, Y+27	; 0x1b
    198a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	4a ef       	ldi	r20, 0xFA	; 250
    1992:	54 e4       	ldi	r21, 0x44	; 68
    1994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	8d 8b       	std	Y+21, r24	; 0x15
    199e:	9e 8b       	std	Y+22, r25	; 0x16
    19a0:	af 8b       	std	Y+23, r26	; 0x17
    19a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19a4:	6d 89       	ldd	r22, Y+21	; 0x15
    19a6:	7e 89       	ldd	r23, Y+22	; 0x16
    19a8:	8f 89       	ldd	r24, Y+23	; 0x17
    19aa:	98 8d       	ldd	r25, Y+24	; 0x18
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e8       	ldi	r20, 0x80	; 128
    19b2:	5f e3       	ldi	r21, 0x3F	; 63
    19b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b8:	88 23       	and	r24, r24
    19ba:	2c f4       	brge	.+10     	; 0x19c6 <ID_PASS+0x28a>
		__ticks = 1;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	9c 8b       	std	Y+20, r25	; 0x14
    19c2:	8b 8b       	std	Y+19, r24	; 0x13
    19c4:	3f c0       	rjmp	.+126    	; 0x1a44 <ID_PASS+0x308>
	else if (__tmp > 65535)
    19c6:	6d 89       	ldd	r22, Y+21	; 0x15
    19c8:	7e 89       	ldd	r23, Y+22	; 0x16
    19ca:	8f 89       	ldd	r24, Y+23	; 0x17
    19cc:	98 8d       	ldd	r25, Y+24	; 0x18
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	3f ef       	ldi	r19, 0xFF	; 255
    19d2:	4f e7       	ldi	r20, 0x7F	; 127
    19d4:	57 e4       	ldi	r21, 0x47	; 71
    19d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19da:	18 16       	cp	r1, r24
    19dc:	4c f5       	brge	.+82     	; 0x1a30 <ID_PASS+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19de:	69 8d       	ldd	r22, Y+25	; 0x19
    19e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e2       	ldi	r20, 0x20	; 32
    19ec:	51 e4       	ldi	r21, 0x41	; 65
    19ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	9c 8b       	std	Y+20, r25	; 0x14
    1a04:	8b 8b       	std	Y+19, r24	; 0x13
    1a06:	0f c0       	rjmp	.+30     	; 0x1a26 <ID_PASS+0x2ea>
    1a08:	88 ec       	ldi	r24, 0xC8	; 200
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9a 8b       	std	Y+18, r25	; 0x12
    1a0e:	89 8b       	std	Y+17, r24	; 0x11
    1a10:	89 89       	ldd	r24, Y+17	; 0x11
    1a12:	9a 89       	ldd	r25, Y+18	; 0x12
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <ID_PASS+0x2d8>
    1a18:	9a 8b       	std	Y+18, r25	; 0x12
    1a1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	9c 8b       	std	Y+20, r25	; 0x14
    1a24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a26:	8b 89       	ldd	r24, Y+19	; 0x13
    1a28:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	69 f7       	brne	.-38     	; 0x1a08 <ID_PASS+0x2cc>
    1a2e:	14 c0       	rjmp	.+40     	; 0x1a58 <ID_PASS+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a30:	6d 89       	ldd	r22, Y+21	; 0x15
    1a32:	7e 89       	ldd	r23, Y+22	; 0x16
    1a34:	8f 89       	ldd	r24, Y+23	; 0x17
    1a36:	98 8d       	ldd	r25, Y+24	; 0x18
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9c 8b       	std	Y+20, r25	; 0x14
    1a42:	8b 8b       	std	Y+19, r24	; 0x13
    1a44:	8b 89       	ldd	r24, Y+19	; 0x13
    1a46:	9c 89       	ldd	r25, Y+20	; 0x14
    1a48:	98 8b       	std	Y+16, r25	; 0x10
    1a4a:	8f 87       	std	Y+15, r24	; 0x0f
    1a4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a4e:	98 89       	ldd	r25, Y+16	; 0x10
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <ID_PASS+0x314>
    1a54:	98 8b       	std	Y+16, r25	; 0x10
    1a56:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					DIO_u8_SetPin_value(Group_D,DIO_u8_Pin_2,DIO_u8_High);
    1a58:	83 e0       	ldi	r24, 0x03	; 3
    1a5a:	62 e0       	ldi	r22, 0x02	; 2
    1a5c:	41 e0       	ldi	r20, 0x01	; 1
    1a5e:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_u8_SetPin_value>
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	aa ef       	ldi	r26, 0xFA	; 250
    1a68:	b3 e4       	ldi	r27, 0x43	; 67
    1a6a:	8b 87       	std	Y+11, r24	; 0x0b
    1a6c:	9c 87       	std	Y+12, r25	; 0x0c
    1a6e:	ad 87       	std	Y+13, r26	; 0x0d
    1a70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	4a ef       	ldi	r20, 0xFA	; 250
    1a80:	54 e4       	ldi	r21, 0x44	; 68
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	8f 83       	std	Y+7, r24	; 0x07
    1a8c:	98 87       	std	Y+8, r25	; 0x08
    1a8e:	a9 87       	std	Y+9, r26	; 0x09
    1a90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a92:	6f 81       	ldd	r22, Y+7	; 0x07
    1a94:	78 85       	ldd	r23, Y+8	; 0x08
    1a96:	89 85       	ldd	r24, Y+9	; 0x09
    1a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e8       	ldi	r20, 0x80	; 128
    1aa0:	5f e3       	ldi	r21, 0x3F	; 63
    1aa2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa6:	88 23       	and	r24, r24
    1aa8:	2c f4       	brge	.+10     	; 0x1ab4 <ID_PASS+0x378>
		__ticks = 1;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9e 83       	std	Y+6, r25	; 0x06
    1ab0:	8d 83       	std	Y+5, r24	; 0x05
    1ab2:	3f c0       	rjmp	.+126    	; 0x1b32 <ID_PASS+0x3f6>
	else if (__tmp > 65535)
    1ab4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab6:	78 85       	ldd	r23, Y+8	; 0x08
    1ab8:	89 85       	ldd	r24, Y+9	; 0x09
    1aba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	3f ef       	ldi	r19, 0xFF	; 255
    1ac0:	4f e7       	ldi	r20, 0x7F	; 127
    1ac2:	57 e4       	ldi	r21, 0x47	; 71
    1ac4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac8:	18 16       	cp	r1, r24
    1aca:	4c f5       	brge	.+82     	; 0x1b1e <ID_PASS+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1acc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ace:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e2       	ldi	r20, 0x20	; 32
    1ada:	51 e4       	ldi	r21, 0x41	; 65
    1adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	bc 01       	movw	r22, r24
    1ae6:	cd 01       	movw	r24, r26
    1ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	9e 83       	std	Y+6, r25	; 0x06
    1af2:	8d 83       	std	Y+5, r24	; 0x05
    1af4:	0f c0       	rjmp	.+30     	; 0x1b14 <ID_PASS+0x3d8>
    1af6:	88 ec       	ldi	r24, 0xC8	; 200
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9c 83       	std	Y+4, r25	; 0x04
    1afc:	8b 83       	std	Y+3, r24	; 0x03
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	9c 81       	ldd	r25, Y+4	; 0x04
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <ID_PASS+0x3c6>
    1b06:	9c 83       	std	Y+4, r25	; 0x04
    1b08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	9e 83       	std	Y+6, r25	; 0x06
    1b12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	69 f7       	brne	.-38     	; 0x1af6 <ID_PASS+0x3ba>
    1b1c:	14 c0       	rjmp	.+40     	; 0x1b46 <ID_PASS+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b20:	78 85       	ldd	r23, Y+8	; 0x08
    1b22:	89 85       	ldd	r24, Y+9	; 0x09
    1b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	8d 83       	std	Y+5, r24	; 0x05
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
    1b36:	9a 83       	std	Y+2, r25	; 0x02
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <ID_PASS+0x402>
    1b42:	9a 83       	std	Y+2, r25	; 0x02
    1b44:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(500);
					DIO_u8_SetPin_value(Group_D,DIO_u8_Pin_2,DIO_u8_Low);
    1b46:	83 e0       	ldi	r24, 0x03	; 3
    1b48:	62 e0       	ldi	r22, 0x02	; 2
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_u8_SetPin_value>
				USART_vSendString("\rPASS:");
			}
		}
		break;
	}
	Segment7_VidDisableDisplayOne();
    1b50:	0e 94 3f 11 	call	0x227e	; 0x227e <Segment7_VidDisableDisplayOne>

}
    1b54:	cd 5b       	subi	r28, 0xBD	; 189
    1b56:	df 4f       	sbci	r29, 0xFF	; 255
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret
					DIO_u8_SetPin_value(Group_D,DIO_u8_Pin_2,DIO_u8_Low);

					break;
				}

				Segment7_VidSetDisplay(NUMBERS[Wrong_u8Pass]);
    1b68:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	ce 01       	movw	r24, r28
    1b70:	c5 96       	adiw	r24, 0x35	; 53
    1b72:	fc 01       	movw	r30, r24
    1b74:	e2 0f       	add	r30, r18
    1b76:	f3 1f       	adc	r31, r19
    1b78:	80 81       	ld	r24, Z
    1b7a:	0e 94 0e 11 	call	0x221c	; 0x221c <Segment7_VidSetDisplay>
				IteratorPass=0;
    1b7e:	1c a6       	std	Y+44, r1	; 0x2c
				USART_vSendString("\rTry Again");
    1b80:	87 ea       	ldi	r24, 0xA7	; 167
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

				USART_vSendString("\rPASS:");
    1b88:	84 e7       	ldi	r24, 0x74	; 116
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
    1b90:	40 ce       	rjmp	.-896    	; 0x1812 <ID_PASS+0xd6>

00001b92 <MainMenu>:
	Segment7_VidDisableDisplayOne();

}

void MainMenu(void)
{
    1b92:	af 92       	push	r10
    1b94:	bf 92       	push	r11
    1b96:	cf 92       	push	r12
    1b98:	df 92       	push	r13
    1b9a:	ef 92       	push	r14
    1b9c:	ff 92       	push	r15
    1b9e:	0f 93       	push	r16
    1ba0:	1f 93       	push	r17
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	2d 97       	sbiw	r28, 0x0d	; 13
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
	//LM35_ADCReading
	u16 Local_u16Counter;


	//Initialize ADC & Timer
	ADC_voidInit();
    1bb6:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	TIM2_voidInitialize();
    1bba:	0e 94 ad 12 	call	0x255a	; 0x255a <TIM2_voidInitialize>
	TIM0_voidInitialize();
    1bbe:	0e 94 57 11 	call	0x22ae	; 0x22ae <TIM0_voidInitialize>
	TIM1_voidInitialize();
    1bc2:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <TIM1_voidInitialize>

	USART_vSendString("\r");
    1bc6:	82 eb       	ldi	r24, 0xB2	; 178
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
	USART_vSendString("\rChoose Option From The Menu");
    1bce:	84 eb       	ldi	r24, 0xB4	; 180
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
	USART_vSendString("\r");
    1bd6:	82 eb       	ldi	r24, 0xB2	; 178
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
	USART_vSendString("\r1- Open The Door");
    1bde:	81 ed       	ldi	r24, 0xD1	; 209
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
	USART_vSendString("\r2- Close The Door");
    1be6:	83 ee       	ldi	r24, 0xE3	; 227
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

	USART_vSendString("\r3- Open Lighting");
    1bee:	86 ef       	ldi	r24, 0xF6	; 246
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
	USART_vSendString("\r4- Close Lighting");
    1bf6:	88 e0       	ldi	r24, 0x08	; 8
    1bf8:	91 e0       	ldi	r25, 0x01	; 1
    1bfa:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

	USART_vSendString("\r5- Open Fan");
    1bfe:	8b e1       	ldi	r24, 0x1B	; 27
    1c00:	91 e0       	ldi	r25, 0x01	; 1
    1c02:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
	USART_vSendString("\r6- Close Fan");
    1c06:	88 e2       	ldi	r24, 0x28	; 40
    1c08:	91 e0       	ldi	r25, 0x01	; 1
    1c0a:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

	USART_vSendString("\r7- Adjust Fan Speed");
    1c0e:	86 e3       	ldi	r24, 0x36	; 54
    1c10:	91 e0       	ldi	r25, 0x01	; 1
    1c12:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
	USART_vSendString("\r8- Adjust Brightness");
    1c16:	8b e4       	ldi	r24, 0x4B	; 75
    1c18:	91 e0       	ldi	r25, 0x01	; 1
    1c1a:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

	USART_vSendString("\r9- Exit");
    1c1e:	81 e6       	ldi	r24, 0x61	; 97
    1c20:	91 e0       	ldi	r25, 0x01	; 1
    1c22:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
	USART_vSendString("\r");
    1c26:	82 eb       	ldi	r24, 0xB2	; 178
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

	USART_vSendString("\rYour Option:");
    1c2e:	8a e6       	ldi	r24, 0x6A	; 106
    1c30:	91 e0       	ldi	r25, 0x01	; 1
    1c32:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
	do
	{
		Menu_u8Option = USART_voidReceive_char();
    1c36:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <USART_voidReceive_char>
    1c3a:	8f 83       	std	Y+7, r24	; 0x07

		if(Menu_u8Option == '1')
    1c3c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c3e:	81 33       	cpi	r24, 0x31	; 49
    1c40:	79 f5       	brne	.+94     	; 0x1ca0 <MainMenu+0x10e>
		{
			/*Input Capture Register ICR1 Value Set in mode 14*/
			TIM1_voidSetInputCapture(20000);
    1c42:	80 e2       	ldi	r24, 0x20	; 32
    1c44:	9e e4       	ldi	r25, 0x4E	; 78
    1c46:	0e 94 55 12 	call	0x24aa	; 0x24aa <TIM1_voidSetInputCapture>

			TIM1_voidSetCompareValChannel_A(2500);
    1c4a:	84 ec       	ldi	r24, 0xC4	; 196
    1c4c:	99 e0       	ldi	r25, 0x09	; 9
    1c4e:	0e 94 31 12 	call	0x2462	; 0x2462 <TIM1_voidSetCompareValChannel_A>

			USART_vSendString("\r");
    1c52:	82 eb       	ldi	r24, 0xB2	; 178
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
			USART_vSendString("\Door is Opened");
    1c5a:	88 e7       	ldi	r24, 0x78	; 120
    1c5c:	91 e0       	ldi	r25, 0x01	; 1
    1c5e:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
			USART_vSendString("\r");
    1c62:	82 eb       	ldi	r24, 0xB2	; 178
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\ra- Main Menu");
    1c6a:	87 e8       	ldi	r24, 0x87	; 135
    1c6c:	91 e0       	ldi	r25, 0x01	; 1
    1c6e:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\rb- Exit");
    1c72:	85 e9       	ldi	r24, 0x95	; 149
    1c74:	91 e0       	ldi	r25, 0x01	; 1
    1c76:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\r\rYour Option:");
    1c7a:	8e e9       	ldi	r24, 0x9E	; 158
    1c7c:	91 e0       	ldi	r25, 0x01	; 1
    1c7e:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			while(1)
			{
				Menu_u8Option = USART_voidReceive_char();
    1c82:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <USART_voidReceive_char>
    1c86:	8f 83       	std	Y+7, r24	; 0x07

				if(Menu_u8Option == 'a')
    1c88:	8f 81       	ldd	r24, Y+7	; 0x07
    1c8a:	81 36       	cpi	r24, 0x61	; 97
    1c8c:	19 f4       	brne	.+6      	; 0x1c94 <MainMenu+0x102>
				{
					MainMenu();
    1c8e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <MainMenu>
    1c92:	f7 cf       	rjmp	.-18     	; 0x1c82 <MainMenu+0xf0>
				}
				else if(Menu_u8Option == 'b')
    1c94:	8f 81       	ldd	r24, Y+7	; 0x07
    1c96:	82 36       	cpi	r24, 0x62	; 98
    1c98:	a1 f7       	brne	.-24     	; 0x1c82 <MainMenu+0xf0>
				{
					Exit();
    1c9a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Exit>
    1c9e:	f1 cf       	rjmp	.-30     	; 0x1c82 <MainMenu+0xf0>
				}
			}
		}
		else if(Menu_u8Option == '2')
    1ca0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca2:	82 33       	cpi	r24, 0x32	; 50
    1ca4:	61 f5       	brne	.+88     	; 0x1cfe <MainMenu+0x16c>
		{

			TIM1_voidSetCompareValChannel_A(750);
    1ca6:	8e ee       	ldi	r24, 0xEE	; 238
    1ca8:	92 e0       	ldi	r25, 0x02	; 2
    1caa:	0e 94 31 12 	call	0x2462	; 0x2462 <TIM1_voidSetCompareValChannel_A>


			USART_vSendString("\r");
    1cae:	82 eb       	ldi	r24, 0xB2	; 178
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
			USART_vSendString("\Door is Closed");
    1cb6:	8d ea       	ldi	r24, 0xAD	; 173
    1cb8:	91 e0       	ldi	r25, 0x01	; 1
    1cba:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
			USART_vSendString("\r");
    1cbe:	82 eb       	ldi	r24, 0xB2	; 178
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\ra- Main Menu");
    1cc6:	87 e8       	ldi	r24, 0x87	; 135
    1cc8:	91 e0       	ldi	r25, 0x01	; 1
    1cca:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\rb- Exit");
    1cce:	85 e9       	ldi	r24, 0x95	; 149
    1cd0:	91 e0       	ldi	r25, 0x01	; 1
    1cd2:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>


			USART_vSendString("\r\rYour Option:");
    1cd6:	8e e9       	ldi	r24, 0x9E	; 158
    1cd8:	91 e0       	ldi	r25, 0x01	; 1
    1cda:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			Menu_u8Option = USART_voidReceive_char();
    1cde:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <USART_voidReceive_char>
    1ce2:	8f 83       	std	Y+7, r24	; 0x07

			if(Menu_u8Option == 'a')
    1ce4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce6:	81 36       	cpi	r24, 0x61	; 97
    1ce8:	19 f4       	brne	.+6      	; 0x1cf0 <MainMenu+0x15e>
			{
				MainMenu();
    1cea:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <MainMenu>
    1cee:	4b c2       	rjmp	.+1174   	; 0x2186 <MainMenu+0x5f4>
			}
			else if(Menu_u8Option == 'b')
    1cf0:	8f 81       	ldd	r24, Y+7	; 0x07
    1cf2:	82 36       	cpi	r24, 0x62	; 98
    1cf4:	09 f0       	breq	.+2      	; 0x1cf8 <MainMenu+0x166>
    1cf6:	47 c2       	rjmp	.+1166   	; 0x2186 <MainMenu+0x5f4>
			{
				Exit();
    1cf8:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Exit>
    1cfc:	44 c2       	rjmp	.+1160   	; 0x2186 <MainMenu+0x5f4>
			}
		}
		else if(Menu_u8Option == '3')
    1cfe:	8f 81       	ldd	r24, Y+7	; 0x07
    1d00:	83 33       	cpi	r24, 0x33	; 51
    1d02:	59 f5       	brne	.+86     	; 0x1d5a <MainMenu+0x1c8>
		{
			DIO_u8_SetPort_value(Group_C,DIO_u8_Port_High);
    1d04:	82 e0       	ldi	r24, 0x02	; 2
    1d06:	6f ef       	ldi	r22, 0xFF	; 255
    1d08:	0e 94 10 0a 	call	0x1420	; 0x1420 <DIO_u8_SetPort_value>

			USART_vSendString("\r");
    1d0c:	82 eb       	ldi	r24, 0xB2	; 178
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
			USART_vSendString("\rLight is Opened");
    1d14:	8c eb       	ldi	r24, 0xBC	; 188
    1d16:	91 e0       	ldi	r25, 0x01	; 1
    1d18:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
			USART_vSendString("\r");
    1d1c:	82 eb       	ldi	r24, 0xB2	; 178
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\ra- Main Menu");
    1d24:	87 e8       	ldi	r24, 0x87	; 135
    1d26:	91 e0       	ldi	r25, 0x01	; 1
    1d28:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\rb- Exit");
    1d2c:	85 e9       	ldi	r24, 0x95	; 149
    1d2e:	91 e0       	ldi	r25, 0x01	; 1
    1d30:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\r\rYour Option:");
    1d34:	8e e9       	ldi	r24, 0x9E	; 158
    1d36:	91 e0       	ldi	r25, 0x01	; 1
    1d38:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			while(1)
			{
				Menu_u8Option = USART_voidReceive_char();
    1d3c:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <USART_voidReceive_char>
    1d40:	8f 83       	std	Y+7, r24	; 0x07

				if(Menu_u8Option == 'a')
    1d42:	8f 81       	ldd	r24, Y+7	; 0x07
    1d44:	81 36       	cpi	r24, 0x61	; 97
    1d46:	19 f4       	brne	.+6      	; 0x1d4e <MainMenu+0x1bc>
				{
					MainMenu();
    1d48:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <MainMenu>
    1d4c:	f7 cf       	rjmp	.-18     	; 0x1d3c <MainMenu+0x1aa>
				}
				else if(Menu_u8Option == 'b')
    1d4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d50:	82 36       	cpi	r24, 0x62	; 98
    1d52:	a1 f7       	brne	.-24     	; 0x1d3c <MainMenu+0x1aa>
				{
					Exit();
    1d54:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Exit>
    1d58:	f1 cf       	rjmp	.-30     	; 0x1d3c <MainMenu+0x1aa>
				}
			}
		}
		else if(Menu_u8Option == '4')
    1d5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d5c:	84 33       	cpi	r24, 0x34	; 52
    1d5e:	69 f5       	brne	.+90     	; 0x1dba <MainMenu+0x228>
		{
			TIM2_voidDisable();
    1d60:	0e 94 dd 12 	call	0x25ba	; 0x25ba <TIM2_voidDisable>

			DIO_u8_SetPort_value(Group_C,DIO_u8_Port_Low);
    1d64:	82 e0       	ldi	r24, 0x02	; 2
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	0e 94 10 0a 	call	0x1420	; 0x1420 <DIO_u8_SetPort_value>

			USART_vSendString("\r");
    1d6c:	82 eb       	ldi	r24, 0xB2	; 178
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
			USART_vSendString("\rLight is Closed");
    1d74:	8d ec       	ldi	r24, 0xCD	; 205
    1d76:	91 e0       	ldi	r25, 0x01	; 1
    1d78:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
			USART_vSendString("\r");
    1d7c:	82 eb       	ldi	r24, 0xB2	; 178
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\ra- Main Menu");
    1d84:	87 e8       	ldi	r24, 0x87	; 135
    1d86:	91 e0       	ldi	r25, 0x01	; 1
    1d88:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\rb- Exit");
    1d8c:	85 e9       	ldi	r24, 0x95	; 149
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\r\rYour Option:");
    1d94:	8e e9       	ldi	r24, 0x9E	; 158
    1d96:	91 e0       	ldi	r25, 0x01	; 1
    1d98:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			while(1)
			{
				Menu_u8Option = USART_voidReceive_char();
    1d9c:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <USART_voidReceive_char>
    1da0:	8f 83       	std	Y+7, r24	; 0x07

				if(Menu_u8Option == 'a')
    1da2:	8f 81       	ldd	r24, Y+7	; 0x07
    1da4:	81 36       	cpi	r24, 0x61	; 97
    1da6:	19 f4       	brne	.+6      	; 0x1dae <MainMenu+0x21c>
				{
					MainMenu();
    1da8:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <MainMenu>
    1dac:	f7 cf       	rjmp	.-18     	; 0x1d9c <MainMenu+0x20a>
				}
				else if(Menu_u8Option == 'b')
    1dae:	8f 81       	ldd	r24, Y+7	; 0x07
    1db0:	82 36       	cpi	r24, 0x62	; 98
    1db2:	a1 f7       	brne	.-24     	; 0x1d9c <MainMenu+0x20a>
				{
					Exit();
    1db4:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Exit>
    1db8:	f1 cf       	rjmp	.-30     	; 0x1d9c <MainMenu+0x20a>
				}
			}
		}
		else if(Menu_u8Option == '5')
    1dba:	8f 81       	ldd	r24, Y+7	; 0x07
    1dbc:	85 33       	cpi	r24, 0x35	; 53
    1dbe:	71 f5       	brne	.+92     	; 0x1e1c <MainMenu+0x28a>
		{
			TIM0_voidDisable();
    1dc0:	0e 94 87 11 	call	0x230e	; 0x230e <TIM0_voidDisable>

			DIO_u8_SetPin_value(Group_D,DIO_u8_Pin_3,DIO_u8_High);
    1dc4:	83 e0       	ldi	r24, 0x03	; 3
    1dc6:	63 e0       	ldi	r22, 0x03	; 3
    1dc8:	41 e0       	ldi	r20, 0x01	; 1
    1dca:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_u8_SetPin_value>

			USART_vSendString("\r");
    1dce:	82 eb       	ldi	r24, 0xB2	; 178
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
			USART_vSendString("\rFAN is Opened");
    1dd6:	8e ed       	ldi	r24, 0xDE	; 222
    1dd8:	91 e0       	ldi	r25, 0x01	; 1
    1dda:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
			USART_vSendString("\r");
    1dde:	82 eb       	ldi	r24, 0xB2	; 178
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\ra- Main Menu");
    1de6:	87 e8       	ldi	r24, 0x87	; 135
    1de8:	91 e0       	ldi	r25, 0x01	; 1
    1dea:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\rb- Exit");
    1dee:	85 e9       	ldi	r24, 0x95	; 149
    1df0:	91 e0       	ldi	r25, 0x01	; 1
    1df2:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\r\rYour Option:");
    1df6:	8e e9       	ldi	r24, 0x9E	; 158
    1df8:	91 e0       	ldi	r25, 0x01	; 1
    1dfa:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			while(1)
			{
				Menu_u8Option = USART_voidReceive_char();
    1dfe:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <USART_voidReceive_char>
    1e02:	8f 83       	std	Y+7, r24	; 0x07

				if(Menu_u8Option == 'a')
    1e04:	8f 81       	ldd	r24, Y+7	; 0x07
    1e06:	81 36       	cpi	r24, 0x61	; 97
    1e08:	19 f4       	brne	.+6      	; 0x1e10 <MainMenu+0x27e>
				{
					MainMenu();
    1e0a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <MainMenu>
    1e0e:	f7 cf       	rjmp	.-18     	; 0x1dfe <MainMenu+0x26c>
				}
				else if(Menu_u8Option == 'b')
    1e10:	8f 81       	ldd	r24, Y+7	; 0x07
    1e12:	82 36       	cpi	r24, 0x62	; 98
    1e14:	a1 f7       	brne	.-24     	; 0x1dfe <MainMenu+0x26c>
				{
					Exit();
    1e16:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Exit>
    1e1a:	f1 cf       	rjmp	.-30     	; 0x1dfe <MainMenu+0x26c>
				}
			}
		}
		else if(Menu_u8Option == '6')
    1e1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e1e:	86 33       	cpi	r24, 0x36	; 54
    1e20:	71 f5       	brne	.+92     	; 0x1e7e <MainMenu+0x2ec>
		{
			TIM0_voidDisable();
    1e22:	0e 94 87 11 	call	0x230e	; 0x230e <TIM0_voidDisable>

			DIO_u8_SetPin_value(Group_D,DIO_u8_Pin_3,DIO_u8_Low);
    1e26:	83 e0       	ldi	r24, 0x03	; 3
    1e28:	63 e0       	ldi	r22, 0x03	; 3
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_u8_SetPin_value>

			USART_vSendString("\r");
    1e30:	82 eb       	ldi	r24, 0xB2	; 178
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
			USART_vSendString("\rFAN is Closed");
    1e38:	8d ee       	ldi	r24, 0xED	; 237
    1e3a:	91 e0       	ldi	r25, 0x01	; 1
    1e3c:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
			USART_vSendString("\r");
    1e40:	82 eb       	ldi	r24, 0xB2	; 178
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\ra- Main Menu");
    1e48:	87 e8       	ldi	r24, 0x87	; 135
    1e4a:	91 e0       	ldi	r25, 0x01	; 1
    1e4c:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\rb- Exit");
    1e50:	85 e9       	ldi	r24, 0x95	; 149
    1e52:	91 e0       	ldi	r25, 0x01	; 1
    1e54:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\r\rYour Option:");
    1e58:	8e e9       	ldi	r24, 0x9E	; 158
    1e5a:	91 e0       	ldi	r25, 0x01	; 1
    1e5c:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			while(1)
			{
				Menu_u8Option = USART_voidReceive_char();
    1e60:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <USART_voidReceive_char>
    1e64:	8f 83       	std	Y+7, r24	; 0x07

				if(Menu_u8Option == 'a')
    1e66:	8f 81       	ldd	r24, Y+7	; 0x07
    1e68:	81 36       	cpi	r24, 0x61	; 97
    1e6a:	19 f4       	brne	.+6      	; 0x1e72 <MainMenu+0x2e0>
				{
					MainMenu();
    1e6c:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <MainMenu>
    1e70:	f7 cf       	rjmp	.-18     	; 0x1e60 <MainMenu+0x2ce>
				}
				else if(Menu_u8Option == 'b')
    1e72:	8f 81       	ldd	r24, Y+7	; 0x07
    1e74:	82 36       	cpi	r24, 0x62	; 98
    1e76:	a1 f7       	brne	.-24     	; 0x1e60 <MainMenu+0x2ce>
				{
					Exit();
    1e78:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Exit>
    1e7c:	f1 cf       	rjmp	.-30     	; 0x1e60 <MainMenu+0x2ce>
				}
			}
		}
		else if(Menu_u8Option == '7')
    1e7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e80:	87 33       	cpi	r24, 0x37	; 55
    1e82:	09 f0       	breq	.+2      	; 0x1e86 <MainMenu+0x2f4>
    1e84:	a7 c0       	rjmp	.+334    	; 0x1fd4 <MainMenu+0x442>
		{
			u16 MilliVolt;
			u16 Temp;

			USART_vSendString("\rWrite s To Know The Temp:  ");
    1e86:	8c ef       	ldi	r24, 0xFC	; 252
    1e88:	91 e0       	ldi	r25, 0x01	; 1
    1e8a:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			while(1)
			{
				ADC_u16StartConversionSynch(Channel_A0, &Local_u16Counter);
    1e8e:	9e 01       	movw	r18, r28
    1e90:	26 5f       	subi	r18, 0xF6	; 246
    1e92:	3f 4f       	sbci	r19, 0xFF	; 255
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	b9 01       	movw	r22, r18
    1e98:	0e 94 d3 05 	call	0xba6	; 0xba6 <ADC_u16StartConversionSynch>
				MilliVolt = (u16) ((Local_u16Counter*5000UL)/1024UL);
    1e9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ea0:	cc 01       	movw	r24, r24
    1ea2:	a0 e0       	ldi	r26, 0x00	; 0
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	28 e8       	ldi	r18, 0x88	; 136
    1ea8:	33 e1       	ldi	r19, 0x13	; 19
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	50 e0       	ldi	r21, 0x00	; 0
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__mulsi3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	07 2e       	mov	r0, r23
    1ebc:	7a e0       	ldi	r23, 0x0A	; 10
    1ebe:	b6 95       	lsr	r27
    1ec0:	a7 95       	ror	r26
    1ec2:	97 95       	ror	r25
    1ec4:	87 95       	ror	r24
    1ec6:	7a 95       	dec	r23
    1ec8:	d1 f7       	brne	.-12     	; 0x1ebe <MainMenu+0x32c>
    1eca:	70 2d       	mov	r23, r0
    1ecc:	9e 83       	std	Y+6, r25	; 0x06
    1ece:	8d 83       	std	Y+5, r24	; 0x05
				Temp = MilliVolt/10;
    1ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed4:	2a e0       	ldi	r18, 0x0A	; 10
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	b9 01       	movw	r22, r18
    1eda:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__udivmodhi4>
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9c 83       	std	Y+4, r25	; 0x04
    1ee2:	8b 83       	std	Y+3, r24	; 0x03

				if(Temp > 30)
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	8f 31       	cpi	r24, 0x1F	; 31
    1eea:	91 05       	cpc	r25, r1
    1eec:	30 f0       	brcs	.+12     	; 0x1efa <MainMenu+0x368>
				{
					DIO_u8_SetPin_value(Group_D,DIO_u8_Pin_3,DIO_u8_High);
    1eee:	83 e0       	ldi	r24, 0x03	; 3
    1ef0:	63 e0       	ldi	r22, 0x03	; 3
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_u8_SetPin_value>
    1ef8:	0a c0       	rjmp	.+20     	; 0x1f0e <MainMenu+0x37c>
				}
				else if(Temp < 30)
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	8e 31       	cpi	r24, 0x1E	; 30
    1f00:	91 05       	cpc	r25, r1
    1f02:	28 f4       	brcc	.+10     	; 0x1f0e <MainMenu+0x37c>
				{
					DIO_u8_SetPin_value(Group_D,DIO_u8_Pin_3,DIO_u8_Low);
    1f04:	83 e0       	ldi	r24, 0x03	; 3
    1f06:	63 e0       	ldi	r22, 0x03	; 3
    1f08:	40 e0       	ldi	r20, 0x00	; 0
    1f0a:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_u8_SetPin_value>
				}
				Menu_u8Option = USART_voidReceive_finish();
    1f0e:	0e 94 76 17 	call	0x2eec	; 0x2eec <USART_voidReceive_finish>
    1f12:	8f 83       	std	Y+7, r24	; 0x07
				if(Menu_u8Option == 's')
    1f14:	8f 81       	ldd	r24, Y+7	; 0x07
    1f16:	83 37       	cpi	r24, 0x73	; 115
    1f18:	09 f0       	breq	.+2      	; 0x1f1c <MainMenu+0x38a>
    1f1a:	b9 cf       	rjmp	.-142    	; 0x1e8e <MainMenu+0x2fc>
				{
					break;
				}
			}
			if(Temp>30)
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f20:	8f 31       	cpi	r24, 0x1F	; 31
    1f22:	91 05       	cpc	r25, r1
    1f24:	d0 f0       	brcs	.+52     	; 0x1f5a <MainMenu+0x3c8>
			{
				USART_vSendString("\r");
    1f26:	82 eb       	ldi	r24, 0xB2	; 178
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
				USART_vSendString("\rWeather is Hot FAN Opened ");
    1f2e:	89 e1       	ldi	r24, 0x19	; 25
    1f30:	92 e0       	ldi	r25, 0x02	; 2
    1f32:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

				USART_vSendString("\rTemp:");
    1f36:	85 e3       	ldi	r24, 0x35	; 53
    1f38:	92 e0       	ldi	r25, 0x02	; 2
    1f3a:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
				USART_voidSendNumber(Temp);
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	9c 81       	ldd	r25, Y+4	; 0x04
    1f42:	cc 01       	movw	r24, r24
    1f44:	a0 e0       	ldi	r26, 0x00	; 0
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <USART_voidSendNumber>
				USART_vSendString("c");
    1f50:	8c e3       	ldi	r24, 0x3C	; 60
    1f52:	92 e0       	ldi	r25, 0x02	; 2
    1f54:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
    1f58:	1e c0       	rjmp	.+60     	; 0x1f96 <MainMenu+0x404>

			}
			else if(Temp<30)
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	8e 31       	cpi	r24, 0x1E	; 30
    1f60:	91 05       	cpc	r25, r1
    1f62:	c8 f4       	brcc	.+50     	; 0x1f96 <MainMenu+0x404>
			{
				USART_vSendString("\r");
    1f64:	82 eb       	ldi	r24, 0xB2	; 178
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
				USART_vSendString("\rWeather is Fine FAN Closed ");
    1f6c:	8e e3       	ldi	r24, 0x3E	; 62
    1f6e:	92 e0       	ldi	r25, 0x02	; 2
    1f70:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
				USART_vSendString("\rTemp:");
    1f74:	85 e3       	ldi	r24, 0x35	; 53
    1f76:	92 e0       	ldi	r25, 0x02	; 2
    1f78:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
				USART_voidSendNumber(Temp);
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	cc 01       	movw	r24, r24
    1f82:	a0 e0       	ldi	r26, 0x00	; 0
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	bc 01       	movw	r22, r24
    1f88:	cd 01       	movw	r24, r26
    1f8a:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <USART_voidSendNumber>
				USART_vSendString("c");
    1f8e:	8c e3       	ldi	r24, 0x3C	; 60
    1f90:	92 e0       	ldi	r25, 0x02	; 2
    1f92:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
			}

			USART_vSendString("\r");
    1f96:	82 eb       	ldi	r24, 0xB2	; 178
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\ra- Main Menu");
    1f9e:	87 e8       	ldi	r24, 0x87	; 135
    1fa0:	91 e0       	ldi	r25, 0x01	; 1
    1fa2:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\rb- Exit");
    1fa6:	85 e9       	ldi	r24, 0x95	; 149
    1fa8:	91 e0       	ldi	r25, 0x01	; 1
    1faa:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\r\rYour Option:");
    1fae:	8e e9       	ldi	r24, 0x9E	; 158
    1fb0:	91 e0       	ldi	r25, 0x01	; 1
    1fb2:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			while(1)
			{
				Menu_u8Option = USART_voidReceive_char();
    1fb6:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <USART_voidReceive_char>
    1fba:	8f 83       	std	Y+7, r24	; 0x07

				if(Menu_u8Option == 'a')
    1fbc:	8f 81       	ldd	r24, Y+7	; 0x07
    1fbe:	81 36       	cpi	r24, 0x61	; 97
    1fc0:	19 f4       	brne	.+6      	; 0x1fc8 <MainMenu+0x436>
				{
					MainMenu();
    1fc2:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <MainMenu>
    1fc6:	f7 cf       	rjmp	.-18     	; 0x1fb6 <MainMenu+0x424>
				}
				else if(Menu_u8Option == 'b')
    1fc8:	8f 81       	ldd	r24, Y+7	; 0x07
    1fca:	82 36       	cpi	r24, 0x62	; 98
    1fcc:	a1 f7       	brne	.-24     	; 0x1fb6 <MainMenu+0x424>
				{
					Exit();
    1fce:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Exit>
    1fd2:	f1 cf       	rjmp	.-30     	; 0x1fb6 <MainMenu+0x424>
				}
			}
		}
		else if(Menu_u8Option == '8')
    1fd4:	8f 81       	ldd	r24, Y+7	; 0x07
    1fd6:	88 33       	cpi	r24, 0x38	; 56
    1fd8:	09 f0       	breq	.+2      	; 0x1fdc <MainMenu+0x44a>
    1fda:	d0 c0       	rjmp	.+416    	; 0x217c <MainMenu+0x5ea>
		{
			USART_vSendString("\rWrite s To Choose Other Option:  ");
    1fdc:	8b e5       	ldi	r24, 0x5B	; 91
    1fde:	92 e0       	ldi	r25, 0x02	; 2
    1fe0:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			u16 Reading;

			while(1)
			{
				ADC_u16StartConversionSynch(Channel_A1,&App_u16ADCReading);
    1fe4:	9e 01       	movw	r18, r28
    1fe6:	28 5f       	subi	r18, 0xF8	; 248
    1fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	b9 01       	movw	r22, r18
    1fee:	0e 94 d3 05 	call	0xba6	; 0xba6 <ADC_u16StartConversionSynch>

				Reading = mapping(0, 670, 1, 10, App_u16ADCReading);
    1ff2:	88 85       	ldd	r24, Y+8	; 0x08
    1ff4:	99 85       	ldd	r25, Y+9	; 0x09
    1ff6:	cc 01       	movw	r24, r24
    1ff8:	a0 e0       	ldi	r26, 0x00	; 0
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <MainMenu+0x46c>
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <MainMenu+0x46e>
    2000:	ed b7       	in	r30, 0x3d	; 61
    2002:	fe b7       	in	r31, 0x3e	; 62
    2004:	31 96       	adiw	r30, 0x01	; 1
    2006:	80 83       	st	Z, r24
    2008:	91 83       	std	Z+1, r25	; 0x01
    200a:	a2 83       	std	Z+2, r26	; 0x02
    200c:	b3 83       	std	Z+3, r27	; 0x03
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	2e e9       	ldi	r18, 0x9E	; 158
    2018:	32 e0       	ldi	r19, 0x02	; 2
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	ee 24       	eor	r14, r14
    2020:	ff 24       	eor	r15, r15
    2022:	87 01       	movw	r16, r14
    2024:	e3 94       	inc	r14
    2026:	0f 2e       	mov	r0, r31
    2028:	fa e0       	ldi	r31, 0x0A	; 10
    202a:	af 2e       	mov	r10, r31
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	bf 2e       	mov	r11, r31
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	cf 2e       	mov	r12, r31
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	df 2e       	mov	r13, r31
    2038:	f0 2d       	mov	r31, r0
    203a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <mapping>
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	9a 83       	std	Y+2, r25	; 0x02
    204c:	89 83       	std	Y+1, r24	; 0x01

				TIM2_voidSetCompareVal(255 - (Reading * 25));
    204e:	29 81       	ldd	r18, Y+1	; 0x01
    2050:	3a 81       	ldd	r19, Y+2	; 0x02
    2052:	c9 01       	movw	r24, r18
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	82 0f       	add	r24, r18
    205a:	93 1f       	adc	r25, r19
    205c:	88 0f       	add	r24, r24
    205e:	99 1f       	adc	r25, r25
    2060:	88 0f       	add	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	82 0f       	add	r24, r18
    206a:	93 1f       	adc	r25, r19
    206c:	80 95       	com	r24
    206e:	0e 94 05 13 	call	0x260a	; 0x260a <TIM2_voidSetCompareVal>

				switch(Reading)
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	9a 81       	ldd	r25, Y+2	; 0x02
    2076:	9d 87       	std	Y+13, r25	; 0x0d
    2078:	8c 87       	std	Y+12, r24	; 0x0c
    207a:	8c 85       	ldd	r24, Y+12	; 0x0c
    207c:	9d 85       	ldd	r25, Y+13	; 0x0d
    207e:	84 30       	cpi	r24, 0x04	; 4
    2080:	91 05       	cpc	r25, r1
    2082:	c9 f1       	breq	.+114    	; 0x20f6 <MainMenu+0x564>
    2084:	8c 85       	ldd	r24, Y+12	; 0x0c
    2086:	9d 85       	ldd	r25, Y+13	; 0x0d
    2088:	85 30       	cpi	r24, 0x05	; 5
    208a:	91 05       	cpc	r25, r1
    208c:	80 f4       	brcc	.+32     	; 0x20ae <MainMenu+0x51c>
    208e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2090:	9d 85       	ldd	r25, Y+13	; 0x0d
    2092:	82 30       	cpi	r24, 0x02	; 2
    2094:	91 05       	cpc	r25, r1
    2096:	29 f1       	breq	.+74     	; 0x20e2 <MainMenu+0x550>
    2098:	8c 85       	ldd	r24, Y+12	; 0x0c
    209a:	9d 85       	ldd	r25, Y+13	; 0x0d
    209c:	83 30       	cpi	r24, 0x03	; 3
    209e:	91 05       	cpc	r25, r1
    20a0:	28 f5       	brcc	.+74     	; 0x20ec <MainMenu+0x55a>
    20a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    20a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    20a6:	81 30       	cpi	r24, 0x01	; 1
    20a8:	91 05       	cpc	r25, r1
    20aa:	b1 f0       	breq	.+44     	; 0x20d8 <MainMenu+0x546>
    20ac:	3d c0       	rjmp	.+122    	; 0x2128 <MainMenu+0x596>
    20ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    20b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    20b2:	86 30       	cpi	r24, 0x06	; 6
    20b4:	91 05       	cpc	r25, r1
    20b6:	49 f1       	breq	.+82     	; 0x210a <MainMenu+0x578>
    20b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    20ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    20bc:	86 30       	cpi	r24, 0x06	; 6
    20be:	91 05       	cpc	r25, r1
    20c0:	f8 f0       	brcs	.+62     	; 0x2100 <MainMenu+0x56e>
    20c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    20c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    20c6:	87 30       	cpi	r24, 0x07	; 7
    20c8:	91 05       	cpc	r25, r1
    20ca:	21 f1       	breq	.+72     	; 0x2114 <MainMenu+0x582>
    20cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    20ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    20d0:	88 30       	cpi	r24, 0x08	; 8
    20d2:	91 05       	cpc	r25, r1
    20d4:	21 f1       	breq	.+72     	; 0x211e <MainMenu+0x58c>
    20d6:	28 c0       	rjmp	.+80     	; 0x2128 <MainMenu+0x596>
				{
				case 1:
					DIO_u8_SetPort_value(Group_C, 0b11111111);
    20d8:	82 e0       	ldi	r24, 0x02	; 2
    20da:	6f ef       	ldi	r22, 0xFF	; 255
    20dc:	0e 94 10 0a 	call	0x1420	; 0x1420 <DIO_u8_SetPort_value>
    20e0:	27 c0       	rjmp	.+78     	; 0x2130 <MainMenu+0x59e>
					break;
				case 2:
					DIO_u8_SetPort_value(Group_C, 0b01111111);
    20e2:	82 e0       	ldi	r24, 0x02	; 2
    20e4:	6f e7       	ldi	r22, 0x7F	; 127
    20e6:	0e 94 10 0a 	call	0x1420	; 0x1420 <DIO_u8_SetPort_value>
    20ea:	22 c0       	rjmp	.+68     	; 0x2130 <MainMenu+0x59e>
					break;
				case 3:
					DIO_u8_SetPort_value(Group_C, 0b00111111);
    20ec:	82 e0       	ldi	r24, 0x02	; 2
    20ee:	6f e3       	ldi	r22, 0x3F	; 63
    20f0:	0e 94 10 0a 	call	0x1420	; 0x1420 <DIO_u8_SetPort_value>
    20f4:	1d c0       	rjmp	.+58     	; 0x2130 <MainMenu+0x59e>
					break;
				case 4:
					DIO_u8_SetPort_value(Group_C, 0b00011111);
    20f6:	82 e0       	ldi	r24, 0x02	; 2
    20f8:	6f e1       	ldi	r22, 0x1F	; 31
    20fa:	0e 94 10 0a 	call	0x1420	; 0x1420 <DIO_u8_SetPort_value>
    20fe:	18 c0       	rjmp	.+48     	; 0x2130 <MainMenu+0x59e>
					break;
				case 5:
					DIO_u8_SetPort_value(Group_C, 0b00001111);
    2100:	82 e0       	ldi	r24, 0x02	; 2
    2102:	6f e0       	ldi	r22, 0x0F	; 15
    2104:	0e 94 10 0a 	call	0x1420	; 0x1420 <DIO_u8_SetPort_value>
    2108:	13 c0       	rjmp	.+38     	; 0x2130 <MainMenu+0x59e>
					break;
				case 6:
					DIO_u8_SetPort_value(Group_C, 0b00000111);
    210a:	82 e0       	ldi	r24, 0x02	; 2
    210c:	67 e0       	ldi	r22, 0x07	; 7
    210e:	0e 94 10 0a 	call	0x1420	; 0x1420 <DIO_u8_SetPort_value>
    2112:	0e c0       	rjmp	.+28     	; 0x2130 <MainMenu+0x59e>
					break;
				case 7:
					DIO_u8_SetPort_value(Group_C, 0b00000011);
    2114:	82 e0       	ldi	r24, 0x02	; 2
    2116:	63 e0       	ldi	r22, 0x03	; 3
    2118:	0e 94 10 0a 	call	0x1420	; 0x1420 <DIO_u8_SetPort_value>
    211c:	09 c0       	rjmp	.+18     	; 0x2130 <MainMenu+0x59e>
					break;
				case 8:
					DIO_u8_SetPort_value(Group_C, 0b00000001);
    211e:	82 e0       	ldi	r24, 0x02	; 2
    2120:	61 e0       	ldi	r22, 0x01	; 1
    2122:	0e 94 10 0a 	call	0x1420	; 0x1420 <DIO_u8_SetPort_value>
    2126:	04 c0       	rjmp	.+8      	; 0x2130 <MainMenu+0x59e>
					break;
				default:
					DIO_u8_SetPort_value(Group_C, 0b00000000);
    2128:	82 e0       	ldi	r24, 0x02	; 2
    212a:	60 e0       	ldi	r22, 0x00	; 0
    212c:	0e 94 10 0a 	call	0x1420	; 0x1420 <DIO_u8_SetPort_value>
					break;
				}

				Menu_u8Option = USART_voidReceive_finish();
    2130:	0e 94 76 17 	call	0x2eec	; 0x2eec <USART_voidReceive_finish>
    2134:	8f 83       	std	Y+7, r24	; 0x07

				if(Menu_u8Option == 's')
    2136:	8f 81       	ldd	r24, Y+7	; 0x07
    2138:	83 37       	cpi	r24, 0x73	; 115
    213a:	09 f0       	breq	.+2      	; 0x213e <MainMenu+0x5ac>
    213c:	53 cf       	rjmp	.-346    	; 0x1fe4 <MainMenu+0x452>
				{
					break;
				}
			}
			USART_vSendString("\r");
    213e:	82 eb       	ldi	r24, 0xB2	; 178
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\ra- Main Menu");
    2146:	87 e8       	ldi	r24, 0x87	; 135
    2148:	91 e0       	ldi	r25, 0x01	; 1
    214a:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\rb- Exit");
    214e:	85 e9       	ldi	r24, 0x95	; 149
    2150:	91 e0       	ldi	r25, 0x01	; 1
    2152:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			USART_vSendString("\r\rYour Option:");
    2156:	8e e9       	ldi	r24, 0x9E	; 158
    2158:	91 e0       	ldi	r25, 0x01	; 1
    215a:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>

			while(1)
			{
				Menu_u8Option = USART_voidReceive_char();
    215e:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <USART_voidReceive_char>
    2162:	8f 83       	std	Y+7, r24	; 0x07

				if(Menu_u8Option == 'a')
    2164:	8f 81       	ldd	r24, Y+7	; 0x07
    2166:	81 36       	cpi	r24, 0x61	; 97
    2168:	19 f4       	brne	.+6      	; 0x2170 <MainMenu+0x5de>
				{
					MainMenu();
    216a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <MainMenu>
    216e:	f7 cf       	rjmp	.-18     	; 0x215e <MainMenu+0x5cc>
				}
				else if(Menu_u8Option == 'b')
    2170:	8f 81       	ldd	r24, Y+7	; 0x07
    2172:	82 36       	cpi	r24, 0x62	; 98
    2174:	a1 f7       	brne	.-24     	; 0x215e <MainMenu+0x5cc>
				{
					Exit();
    2176:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Exit>
    217a:	f1 cf       	rjmp	.-30     	; 0x215e <MainMenu+0x5cc>
				}
			}
		}
		else if(Menu_u8Option == '9')
    217c:	8f 81       	ldd	r24, Y+7	; 0x07
    217e:	89 33       	cpi	r24, 0x39	; 57
    2180:	11 f4       	brne	.+4      	; 0x2186 <MainMenu+0x5f4>
		{
			Exit();
    2182:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Exit>
		}
	}while(Menu_u8Option != '#');
    2186:	8f 81       	ldd	r24, Y+7	; 0x07
    2188:	83 32       	cpi	r24, 0x23	; 35
    218a:	09 f0       	breq	.+2      	; 0x218e <MainMenu+0x5fc>
    218c:	54 cd       	rjmp	.-1368   	; 0x1c36 <MainMenu+0xa4>
}
    218e:	2d 96       	adiw	r28, 0x0d	; 13
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	de bf       	out	0x3e, r29	; 62
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	cd bf       	out	0x3d, r28	; 61
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	1f 91       	pop	r17
    21a0:	0f 91       	pop	r16
    21a2:	ff 90       	pop	r15
    21a4:	ef 90       	pop	r14
    21a6:	df 90       	pop	r13
    21a8:	cf 90       	pop	r12
    21aa:	bf 90       	pop	r11
    21ac:	af 90       	pop	r10
    21ae:	08 95       	ret

000021b0 <Exit>:

void Exit(void)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_SetPort_value(Group_A,DIO_u8_Low);
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	60 e0       	ldi	r22, 0x00	; 0
    21bc:	0e 94 10 0a 	call	0x1420	; 0x1420 <DIO_u8_SetPort_value>

	DIO_u8_SetPort_value(Group_B,DIO_u8_Low);
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	0e 94 10 0a 	call	0x1420	; 0x1420 <DIO_u8_SetPort_value>

	DIO_u8_SetPort_value(Group_C,DIO_u8_Low);
    21c8:	82 e0       	ldi	r24, 0x02	; 2
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	0e 94 10 0a 	call	0x1420	; 0x1420 <DIO_u8_SetPort_value>

	DIO_u8_SetPort_value(Group_D,DIO_u8_Low);
    21d0:	83 e0       	ldi	r24, 0x03	; 3
    21d2:	60 e0       	ldi	r22, 0x00	; 0
    21d4:	0e 94 10 0a 	call	0x1420	; 0x1420 <DIO_u8_SetPort_value>

	USART_vSendString("\r\rbye bye bebooooooo");
    21d8:	8e e7       	ldi	r24, 0x7E	; 126
    21da:	92 e0       	ldi	r25, 0x02	; 2
    21dc:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <USART_vSendString>
}
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <Segment7_VoidInit>:
#include "DIO_interface.h"
#include "SEGMENT7_interface.h"
#include "SEGMENT7_config.h"

void Segment7_VoidInit(void)
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_SetPort_Dir(u8Port7Seg, DIO_u8_PORT_Output);
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	6f ef       	ldi	r22, 0xFF	; 255
    21f2:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <DIO_u8_SetPort_Dir>
	DIO_u8_SetPin_Dir(u8ComPort7Seg, u8ComPin7SegNumOne, DIO_u8_Output);
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	63 e0       	ldi	r22, 0x03	; 3
    21fa:	41 e0       	ldi	r20, 0x01	; 1
    21fc:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_u8_SetPin_Dir>
	DIO_u8_SetPin_Dir(u8ComPort7Seg, u8ComPin7SegNumTwo, DIO_u8_Output);
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	63 e0       	ldi	r22, 0x03	; 3
    2204:	41 e0       	ldi	r20, 0x01	; 1
    2206:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_u8_SetPin_Dir>
	Segment7_VidClearDisplay();
    220a:	0e 94 1c 11 	call	0x2238	; 0x2238 <Segment7_VidClearDisplay>
	Segment7_VidEnableDisplayOne();
    220e:	0e 94 27 11 	call	0x224e	; 0x224e <Segment7_VidEnableDisplayOne>
	Segment7_VidEnableDisplayOne();
    2212:	0e 94 27 11 	call	0x224e	; 0x224e <Segment7_VidEnableDisplayOne>
}
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <Segment7_VidSetDisplay>:

void Segment7_VidSetDisplay(u8 u8ArrCopy)
{
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	0f 92       	push	r0
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	89 83       	std	Y+1, r24	; 0x01
	{
	case ComAnode:
		DIO_u8_SetPort_value(u8Port7Seg, ~(u8ArrCopy));
	break;
	case ComCathode:
		DIO_u8_SetPort_value(u8Port7Seg, u8ArrCopy);
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	69 81       	ldd	r22, Y+1	; 0x01
    222c:	0e 94 10 0a 	call	0x1420	; 0x1420 <DIO_u8_SetPort_value>
	break;
	}
}
    2230:	0f 90       	pop	r0
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <Segment7_VidClearDisplay>:

void Segment7_VidClearDisplay(void)
{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
	{
	case ComAnode:
		DIO_u8_SetPort_value(u8Port7Seg, DIO_u8_High);
	break;
	case ComCathode:
		DIO_u8_SetPort_value(u8Port7Seg, DIO_u8_Low);
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	60 e0       	ldi	r22, 0x00	; 0
    2244:	0e 94 10 0a 	call	0x1420	; 0x1420 <DIO_u8_SetPort_value>
	break;
	}
}
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	08 95       	ret

0000224e <Segment7_VidEnableDisplayOne>:

 void Segment7_VidEnableDisplayOne(void){
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
		{
		case ComAnode:
			DIO_u8_SetPin_value(u8ComPort7Seg, u8ComPin7SegNumOne, DIO_u8_High);
			break;
		case ComCathode:
			DIO_u8_SetPin_value(u8ComPort7Seg, u8ComPin7SegNumOne, DIO_u8_Low);
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	63 e0       	ldi	r22, 0x03	; 3
    225a:	40 e0       	ldi	r20, 0x00	; 0
    225c:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_u8_SetPin_value>
			break;
		}
}
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	08 95       	ret

00002266 <Segment7_VidEnableDisplayTwo>:

 void Segment7_VidEnableDisplayTwo(void){
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
 		{
 		case ComAnode:
 			DIO_u8_SetPin_value(u8ComPort7Seg, u8ComPin7SegNumTwo, DIO_u8_High);
 			break;
 		case ComCathode:
 			DIO_u8_SetPin_value(u8ComPort7Seg, u8ComPin7SegNumTwo, DIO_u8_Low);
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	63 e0       	ldi	r22, 0x03	; 3
    2272:	40 e0       	ldi	r20, 0x00	; 0
    2274:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_u8_SetPin_value>
 			break;
 		}
 }
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	08 95       	ret

0000227e <Segment7_VidDisableDisplayOne>:

 void Segment7_VidDisableDisplayOne(void){
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
			{
			case ComAnode:
				DIO_u8_SetPin_value(u8ComPort7Seg, u8ComPin7SegNumOne, DIO_u8_Low);
				break;
			case ComCathode:
				DIO_u8_SetPin_value(u8ComPort7Seg, u8ComPin7SegNumOne, DIO_u8_High);
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	63 e0       	ldi	r22, 0x03	; 3
    228a:	41 e0       	ldi	r20, 0x01	; 1
    228c:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_u8_SetPin_value>
				break;
			}
}
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret

00002296 <Segment7_VidDisableDisplayTwo>:

 void Segment7_VidDisableDisplayTwo(void){
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
			{
			case ComAnode:
				DIO_u8_SetPin_value(u8ComPort7Seg, u8ComPin7SegNumTwo, DIO_u8_Low);
				break;
			case ComCathode:
				DIO_u8_SetPin_value(u8ComPort7Seg, u8ComPin7SegNumTwo, DIO_u8_High);
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	63 e0       	ldi	r22, 0x03	; 3
    22a2:	41 e0       	ldi	r20, 0x01	; 1
    22a4:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_u8_SetPin_value>
				break;
			}
}
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <TIM0_voidInitialize>:
#include "Timer_register.h"
#include "Timer_interface.h"

void (*TIMERS_pvCallBack_Func[8])(void) = {NULL};

void TIM0_voidInitialize(void){
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0_Register,WGM00);
#elif 	TIM0_WAVEFORM_MODE== CTC_MODE
	SET_BIT(TCCR0_Register,WGM01);
	CLR_BIT(TCCR0_Register,WGM00);
#elif	 TIM0_WAVEFORM_MODE== FASTPWM_MODE
	SET_BIT(TCCR0_Register,WGM01);
    22b6:	a3 e5       	ldi	r26, 0x53	; 83
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	e3 e5       	ldi	r30, 0x53	; 83
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	88 60       	ori	r24, 0x08	; 8
    22c2:	8c 93       	st	X, r24
	SET_BIT(TCCR0_Register,WGM00);
    22c4:	a3 e5       	ldi	r26, 0x53	; 83
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e3 e5       	ldi	r30, 0x53	; 83
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	80 64       	ori	r24, 0x40	; 64
    22d0:	8c 93       	st	X, r24
#else
#endif
		//PRESCALER Selection
	/*Clock Select (Prescaler) to be used by the Timer/Counter*/
	TCCR0_Register = ((TCCR0_Register &= 0b11111000) | TIM0_CLOCK_SELECT);
    22d2:	23 e5       	ldi	r18, 0x53	; 83
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	a3 e5       	ldi	r26, 0x53	; 83
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e3 e5       	ldi	r30, 0x53	; 83
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	88 7f       	andi	r24, 0xF8	; 248
    22e2:	8c 93       	st	X, r24
    22e4:	8c 91       	ld	r24, X
    22e6:	82 60       	ori	r24, 0x02	; 2
    22e8:	f9 01       	movw	r30, r18
    22ea:	80 83       	st	Z, r24
	CLR_BIT(TCCR0_Register,COM00);
#elif 	TIM0_COMPARE_MODE == OC0_TOGGLE					//Only on non PWM mode
	CLR_BIT(TCCR0_Register,COM01);
	SET_BIT(TCCR0_Register,COM00);
#elif 	TIM0_COMPARE_MODE == OC0_CLEAR_NON_INVERTED		//CLEAR BIT IN NON PWM AND NON INVERTED IN PWM PHASECORRECT OR FAST PWM
	SET_BIT(TCCR0_Register,COM01);
    22ec:	a3 e5       	ldi	r26, 0x53	; 83
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e3 e5       	ldi	r30, 0x53	; 83
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	80 62       	ori	r24, 0x20	; 32
    22f8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_Register,COM00);
    22fa:	a3 e5       	ldi	r26, 0x53	; 83
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e3 e5       	ldi	r30, 0x53	; 83
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	8f 7e       	andi	r24, 0xEF	; 239
    2306:	8c 93       	st	X, r24
#elif 	TIM0_COMPARE_MODE == OC0_SET_INVERTED			//SET BIT IN NON PWM AND INVERTED IN PWM PHASECORRECT OR FAST PWM
	SET_BIT(TCCR0_Register,COM01);
	SET_BIT(TCCR0_Register,COM00);
#else
#endif
}
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	08 95       	ret

0000230e <TIM0_voidDisable>:

/*Timer0 Disable*/
void TIM0_voidDisable(void){
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
	TCCR0_Register=((TCCR0_Register&0b11111000)|(0));
    2316:	a3 e5       	ldi	r26, 0x53	; 83
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e3 e5       	ldi	r30, 0x53	; 83
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	88 7f       	andi	r24, 0xF8	; 248
    2322:	8c 93       	st	X, r24
}
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <TIM0_voidSetTimerReg>:

/*Preoload Value Set*/
void TIM0_voidSetTimerReg(u8 Copy_u8Value){
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	0f 92       	push	r0
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_Register=Copy_u8Value;
    2336:	e2 e5       	ldi	r30, 0x52	; 82
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	80 83       	st	Z, r24
}
    233e:	0f 90       	pop	r0
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <Timer0_u16ReadTimerValue>:

/*Preoload Value Read*/
u16 Timer0_u16ReadTimerValue(void)
{
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
	return TCNT0_Register ;
    234e:	e2 e5       	ldi	r30, 0x52	; 82
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	88 2f       	mov	r24, r24
    2356:	90 e0       	ldi	r25, 0x00	; 0
}
    2358:	cf 91       	pop	r28
    235a:	df 91       	pop	r29
    235c:	08 95       	ret

0000235e <TIM0_voidSetCompareVal>:

/*Compare Match Value Set*/
void TIM0_voidSetCompareVal(u8 Copy_u8Value){
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	0f 92       	push	r0
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	89 83       	std	Y+1, r24	; 0x01
	OCR0_Register=Copy_u8Value;
    236a:	ec e5       	ldi	r30, 0x5C	; 92
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	80 83       	st	Z, r24
}
    2372:	0f 90       	pop	r0
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <TIM0_VoidDutyCyclePercentage>:

/*Auto Generating OCR0 value by Duty cycle percentage */
void TIM0_VoidDutyCyclePercentage(u8 Copy_u8PersantageValue)
{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	0f 92       	push	r0
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
    2384:	89 83       	std	Y+1, r24	; 0x01
	if(((TIM0_WAVEFORM_MODE== FASTPWM_MODE) || (TIM0_WAVEFORM_MODE== PWM_FASECORRECT_MODE)) && (TIM0_COMPARE_MODE == OC0_CLEAR_NON_INVERTED))
	{
		OCR0_Register = 256 * (Copy_u8PersantageValue/100);
    2386:	ec e5       	ldi	r30, 0x5C	; 92
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	94 e6       	ldi	r25, 0x64	; 100
    238e:	69 2f       	mov	r22, r25
    2390:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__udivmodqi4>
    2394:	88 2f       	mov	r24, r24
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	98 2f       	mov	r25, r24
    239a:	88 27       	eor	r24, r24
    239c:	80 83       	st	Z, r24
	else if(((TIM0_WAVEFORM_MODE== FASTPWM_MODE) || (TIM0_WAVEFORM_MODE== PWM_FASECORRECT_MODE)) && (TIM0_COMPARE_MODE == OC0_SET_INVERTED))
	{
		OCR0_Register = 256 * (1-(Copy_u8PersantageValue/100));
	}
	else{ };
}
    239e:	0f 90       	pop	r0
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <TIM1_voidInitialize>:


/*************************************************************TIMER1**************************************************************/

void TIM1_voidInitialize(void){
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62

#elif	TIM1_WAVEFORM_MODE== CTC_ICR1
	TCCR1B_Register=((TCCR1B_Register&0b11100111)|(24));
	TCCR1A_Register=((TCCR1A_Register&0b11111100)|(0));
#elif	TIM1_WAVEFORM_MODE== PWM_FAST_ICR1
	TCCR1B_Register=((TCCR1B_Register&0b11100111)|(24));
    23ae:	ae e4       	ldi	r26, 0x4E	; 78
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	ee e4       	ldi	r30, 0x4E	; 78
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	88 61       	ori	r24, 0x18	; 24
    23ba:	8c 93       	st	X, r24
	TCCR1A_Register=((TCCR1A_Register&0b11111100)|(2));
    23bc:	af e4       	ldi	r26, 0x4F	; 79
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	ef e4       	ldi	r30, 0x4F	; 79
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	8c 7f       	andi	r24, 0xFC	; 252
    23c8:	82 60       	ori	r24, 0x02	; 2
    23ca:	8c 93       	st	X, r24
	TCCR1A_Register=((TCCR1A_Register&0b11111100)|(3));
#else
#endif

	//Clock Select (Prescaler) to be used by the Timer1/Counter (TCCR1B)
	TCCR1B_Register = ((TCCR1B_Register &= 0b11111000) | TIM1_CLOCK_SELECT);
    23cc:	2e e4       	ldi	r18, 0x4E	; 78
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	ae e4       	ldi	r26, 0x4E	; 78
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	ee e4       	ldi	r30, 0x4E	; 78
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	88 7f       	andi	r24, 0xF8	; 248
    23dc:	8c 93       	st	X, r24
    23de:	8c 91       	ld	r24, X
    23e0:	82 60       	ori	r24, 0x02	; 2
    23e2:	f9 01       	movw	r30, r18
    23e4:	80 83       	st	Z, r24
#if 	TIM1A_COMPARE_MODE == OC1A_DISCONNECTED			//In all modes
	TCCR1A_Register=((TCCR1A_Register&0b00111111)|(0));
#elif 	TIM1A_COMPARE_MODE == OC1A_TOGGLE					//Only on non PWM mode TOGGLE ON COMPARE MATCH
	TCCR1A_Register=((TCCR1A_Register&0b00111111)|(64));
#elif 	TIM1A_COMPARE_MODE == OC1A_CLEAR_NON_INVERTED		//CLEAR BIT IN NON PWM AND NON INVERTED IN PWM PHASECORRECT OR FAST PWM
	TCCR1A_Register=((TCCR1A_Register&0b00111111)|(128));
    23e6:	af e4       	ldi	r26, 0x4F	; 79
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	ef e4       	ldi	r30, 0x4F	; 79
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	8f 73       	andi	r24, 0x3F	; 63
    23f2:	80 68       	ori	r24, 0x80	; 128
    23f4:	8c 93       	st	X, r24
#if 	TIM1B_COMPARE_MODE == OC1B_DISCONNECTED			//In all modes
	TCCR1B_Register=((TCCR1B_Register&0b00111111)|(0));
#elif 	TIM1B_COMPARE_MODE == OC1B_TOGGLE					//Only on non PWM mode TOGGLE ON COMPARE MATCH
	TCCR1B_Register=((TCCR1B_Register&0b00111111)|(64));
#elif 	TIM1B_COMPARE_MODE == OC1B_CLEAR_NON_INVERTED		//CLEAR BIT IN NON PWM AND NON INVERTED IN PWM PHASECORRECT OR FAST PWM
	TCCR1B_Register=((TCCR1B_Register&0b00111111)|(128));
    23f6:	ae e4       	ldi	r26, 0x4E	; 78
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	ee e4       	ldi	r30, 0x4E	; 78
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	8f 73       	andi	r24, 0x3F	; 63
    2402:	80 68       	ori	r24, 0x80	; 128
    2404:	8c 93       	st	X, r24
#elif 	TIM1B_COMPARE_MODE == OC1B_SET_INVERTED			//SET BIT IN NON PWM AND INVERTED IN PWM PHASECORRECT OR FAST PWM
	TCCR1B_Register=((TCCR1B_Register&0b00111111)|(192));
#else
#endif
}
    2406:	cf 91       	pop	r28
    2408:	df 91       	pop	r29
    240a:	08 95       	ret

0000240c <TIM1_voidDisable>:

/*Timer1 Disable*/
void TIM1_voidDisable(void){
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_Register=((TCCR1B_Register&0b11111000)|(0));
    2414:	ae e4       	ldi	r26, 0x4E	; 78
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	ee e4       	ldi	r30, 0x4E	; 78
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	88 7f       	andi	r24, 0xF8	; 248
    2420:	8c 93       	st	X, r24
}
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	08 95       	ret

00002428 <TIM1_voidSetTimerReg>:

/*Preoload Value Set*/
void TIM1_voidSetTimerReg(u16 Copy_u16Value){
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	00 d0       	rcall	.+0      	; 0x242e <TIM1_voidSetTimerReg+0x6>
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	9a 83       	std	Y+2, r25	; 0x02
    2434:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_Register=Copy_u16Value;
    2436:	ec e4       	ldi	r30, 0x4C	; 76
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	91 83       	std	Z+1, r25	; 0x01
    2440:	80 83       	st	Z, r24
}
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <Timer1_u16ReadTimerValue>:

/*Preoload Value Read*/
u16 Timer1_u16ReadTimerValue(void)
{
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_Register ;
    2454:	ec e4       	ldi	r30, 0x4C	; 76
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	91 81       	ldd	r25, Z+1	; 0x01
}
    245c:	cf 91       	pop	r28
    245e:	df 91       	pop	r29
    2460:	08 95       	ret

00002462 <TIM1_voidSetCompareValChannel_A>:

/*Compare Match Value on Channel A Set*/
void TIM1_voidSetCompareValChannel_A(u16 Copy_u16Value){
    2462:	df 93       	push	r29
    2464:	cf 93       	push	r28
    2466:	00 d0       	rcall	.+0      	; 0x2468 <TIM1_voidSetCompareValChannel_A+0x6>
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	9a 83       	std	Y+2, r25	; 0x02
    246e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_Register=Copy_u16Value;
    2470:	ea e4       	ldi	r30, 0x4A	; 74
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	9a 81       	ldd	r25, Y+2	; 0x02
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	80 83       	st	Z, r24
}
    247c:	0f 90       	pop	r0
    247e:	0f 90       	pop	r0
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <TIM1_voidSetCompareValChannel_B>:

/*Compare Match Value on Channel B Set*/
void TIM1_voidSetCompareValChannel_B(u16 Copy_u16Value){
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	00 d0       	rcall	.+0      	; 0x248c <TIM1_voidSetCompareValChannel_B+0x6>
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
    2490:	9a 83       	std	Y+2, r25	; 0x02
    2492:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_Register=Copy_u16Value;
    2494:	e8 e4       	ldi	r30, 0x48	; 72
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	9a 81       	ldd	r25, Y+2	; 0x02
    249c:	91 83       	std	Z+1, r25	; 0x01
    249e:	80 83       	st	Z, r24
}
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <TIM1_voidSetInputCapture>:

/*Input Capture Register ICR1 Value Set*/
void TIM1_voidSetInputCapture(u16 Copy_u16Value){
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <TIM1_voidSetInputCapture+0x6>
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	9a 83       	std	Y+2, r25	; 0x02
    24b6:	89 83       	std	Y+1, r24	; 0x01
	ICR1_Register=Copy_u16Value;
    24b8:	e6 e4       	ldi	r30, 0x46	; 70
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	9a 81       	ldd	r25, Y+2	; 0x02
    24c0:	91 83       	std	Z+1, r25	; 0x01
    24c2:	80 83       	st	Z, r24
}
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <ICU_voidInit>:


/***************************************************************ICU***************************************************************/
void ICU_voidInit(void)
{
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
	/*Set trigger source to Rising Edge Initially*/
	SET_BIT(TCCR1B_Register,ICES1);
    24d6:	ae e4       	ldi	r26, 0x4E	; 78
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	ee e4       	ldi	r30, 0x4E	; 78
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	80 64       	ori	r24, 0x40	; 64
    24e2:	8c 93       	st	X, r24

	/*Enable Input Capture interrupt*/
	SET_BIT(TIMSK_Register,TICIE1);
    24e4:	a9 e5       	ldi	r26, 0x59	; 89
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e9 e5       	ldi	r30, 0x59	; 89
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	80 62       	ori	r24, 0x20	; 32
    24f0:	8c 93       	st	X, r24
}
    24f2:	cf 91       	pop	r28
    24f4:	df 91       	pop	r29
    24f6:	08 95       	ret

000024f8 <ICU_u16ReadInputCaptuer>:

u16 ICU_u16ReadInputCaptuer(void)
{
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
	return ICR1_Register;
    2500:	e6 e4       	ldi	r30, 0x46	; 70
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	91 81       	ldd	r25, Z+1	; 0x01
}
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <ICU_u8SetTriggerEdge>:

u8 ICU_u8SetTriggerEdge(u8 Copy_u8Edge)
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	00 d0       	rcall	.+0      	; 0x2514 <ICU_u8SetTriggerEdge+0x6>
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    251a:	82 e0       	ldi	r24, 0x02	; 2
    251c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Edge == ICU_RISING_EDGE )
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	81 30       	cpi	r24, 0x01	; 1
    2522:	41 f4       	brne	.+16     	; 0x2534 <ICU_u8SetTriggerEdge+0x26>
	{
		SET_BIT(TCCR1B_Register,ICES1);
    2524:	ae e4       	ldi	r26, 0x4E	; 78
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	ee e4       	ldi	r30, 0x4E	; 78
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	80 64       	ori	r24, 0x40	; 64
    2530:	8c 93       	st	X, r24
    2532:	0d c0       	rjmp	.+26     	; 0x254e <ICU_u8SetTriggerEdge+0x40>
	}
	else if(Copy_u8Edge == ICU_FALLING_EDGE )
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	88 23       	and	r24, r24
    2538:	41 f4       	brne	.+16     	; 0x254a <ICU_u8SetTriggerEdge+0x3c>
	{
		CLR_BIT(TCCR1B_Register,ICES1);
    253a:	ae e4       	ldi	r26, 0x4E	; 78
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	ee e4       	ldi	r30, 0x4E	; 78
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	8f 7b       	andi	r24, 0xBF	; 191
    2546:	8c 93       	st	X, r24
    2548:	02 c0       	rjmp	.+4      	; 0x254e <ICU_u8SetTriggerEdge+0x40>
	}
	else
	{
		Local_u8ErrorState = NOK;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    254e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret

0000255a <TIM2_voidInitialize>:


/*********************************************************************************************************************************/

void TIM2_voidInitialize(void){
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2_Register,WGM20);
#elif 	TIM2_WAVEFORM_MODE== CTC_MODE
	SET_BIT(TCCR2_Register,WGM21);
	CLR_BIT(TCCR2_Register,WGM20);
#elif	 TIM2_WAVEFORM_MODE== FASTPWM_MODE
	SET_BIT(TCCR2_Register,WGM21);
    2562:	a5 e4       	ldi	r26, 0x45	; 69
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	e5 e4       	ldi	r30, 0x45	; 69
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	88 60       	ori	r24, 0x08	; 8
    256e:	8c 93       	st	X, r24
	SET_BIT(TCCR2_Register,WGM20);
    2570:	a5 e4       	ldi	r26, 0x45	; 69
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	e5 e4       	ldi	r30, 0x45	; 69
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	80 64       	ori	r24, 0x40	; 64
    257c:	8c 93       	st	X, r24
#else
#endif
		//Clock Select (Prescaler) to be used by the Timer2/Counter (TCCR2)
	TCCR2_Register = ((TCCR2_Register &= 0b11111000) | TIM2_CLOCK_SELECT);
    257e:	25 e4       	ldi	r18, 0x45	; 69
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	a5 e4       	ldi	r26, 0x45	; 69
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e5 e4       	ldi	r30, 0x45	; 69
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	88 7f       	andi	r24, 0xF8	; 248
    258e:	8c 93       	st	X, r24
    2590:	8c 91       	ld	r24, X
    2592:	82 60       	ori	r24, 0x02	; 2
    2594:	f9 01       	movw	r30, r18
    2596:	80 83       	st	Z, r24
	CLR_BIT(TCCR2_Register,COM20);
#elif 	TIM2_COMPARE_MODE == OC2_TOGGLE					//Only on non PWM mode
	CLR_BIT(TCCR2_Register,COM21);
	SET_BIT(TCCR2_Register,COM20);
#elif 	TIM2_COMPARE_MODE == OC2_CLEAR_NON_INVERTED		//CLEAR BIT IN NON PWM AND NON INVERTED IN PWM PHASECORRECT OR FAST PWM
	SET_BIT(TCCR2_Register,COM21);
    2598:	a5 e4       	ldi	r26, 0x45	; 69
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e5 e4       	ldi	r30, 0x45	; 69
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	80 62       	ori	r24, 0x20	; 32
    25a4:	8c 93       	st	X, r24
	CLR_BIT(TCCR2_Register,COM20);
    25a6:	a5 e4       	ldi	r26, 0x45	; 69
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	e5 e4       	ldi	r30, 0x45	; 69
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	8f 7e       	andi	r24, 0xEF	; 239
    25b2:	8c 93       	st	X, r24
#elif 	TIM2_COMPARE_MODE == OC2_SET_INVERTED			//SET BIT IN NON PWM AND INVERTED IN PWM PHASECORRECT OR FAST PWM
	SET_BIT(TCCR2_Register,COM21);
	SET_BIT(TCCR2_Register,COM20);
#else
#endif
}
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <TIM2_voidDisable>:

/*Timer2 Disable*/
void TIM2_voidDisable(void){
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
	TCCR2_Register=((TCCR2_Register&0b11111000)|(0));
    25c2:	a5 e4       	ldi	r26, 0x45	; 69
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e5 e4       	ldi	r30, 0x45	; 69
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	88 7f       	andi	r24, 0xF8	; 248
    25ce:	8c 93       	st	X, r24
}
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <TIM2_voidSetTimerReg>:

/*Preoload Value Set*/
void TIM2_voidSetTimerReg(u8 Copy_u8Value){
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	0f 92       	push	r0
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
    25e0:	89 83       	std	Y+1, r24	; 0x01
	TCNT2_Register=Copy_u8Value;
    25e2:	e4 e4       	ldi	r30, 0x44	; 68
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	80 83       	st	Z, r24
}
    25ea:	0f 90       	pop	r0
    25ec:	cf 91       	pop	r28
    25ee:	df 91       	pop	r29
    25f0:	08 95       	ret

000025f2 <Timer2_u16ReadTimerValue>:


u16 Timer2_u16ReadTimerValue(void)
{
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
	return TCCR2_Register ;
    25fa:	e5 e4       	ldi	r30, 0x45	; 69
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	88 2f       	mov	r24, r24
    2602:	90 e0       	ldi	r25, 0x00	; 0
}
    2604:	cf 91       	pop	r28
    2606:	df 91       	pop	r29
    2608:	08 95       	ret

0000260a <TIM2_voidSetCompareVal>:

/*Compare Match Value Set*/
void TIM2_voidSetCompareVal(u8 Copy_u8Value){
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	0f 92       	push	r0
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	89 83       	std	Y+1, r24	; 0x01
	OCR2_Register=Copy_u8Value;
    2616:	e3 e4       	ldi	r30, 0x43	; 67
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	80 83       	st	Z, r24
}
    261e:	0f 90       	pop	r0
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	08 95       	ret

00002626 <TIM2_VoidDutyCyclePercentage>:

/*Auto Generating OCR0 value by Duty cycle percentage */
void TIM2_VoidDutyCyclePercentage(u8 Copy_u8PersantageValue)
{
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	0f 92       	push	r0
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
    2630:	89 83       	std	Y+1, r24	; 0x01
	if(((TIM2_WAVEFORM_MODE== FASTPWM_MODE) || (TIM2_WAVEFORM_MODE== PWM_FASECORRECT_MODE)) && (TIM2_COMPARE_MODE == OC2_CLEAR_NON_INVERTED))
	{
		OCR2_Register = 256 * (Copy_u8PersantageValue/100);
    2632:	e3 e4       	ldi	r30, 0x43	; 67
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	94 e6       	ldi	r25, 0x64	; 100
    263a:	69 2f       	mov	r22, r25
    263c:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__udivmodqi4>
    2640:	88 2f       	mov	r24, r24
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	98 2f       	mov	r25, r24
    2646:	88 27       	eor	r24, r24
    2648:	80 83       	st	Z, r24
	else if(((TIM2_WAVEFORM_MODE== FASTPWM_MODE) || (TIM2_WAVEFORM_MODE== PWM_FASECORRECT_MODE)) && (TIM2_COMPARE_MODE == OC2_SET_INVERTED))
	{
		OCR2_Register = 256 * (1-(Copy_u8PersantageValue/100));
	}
	else{ };
}
    264a:	0f 90       	pop	r0
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <Timers_voidEn_Dis_Interrupt>:


/*************************************************************ALL TIMERS***********************************************************/

void Timers_voidEn_Dis_Interrupt(u16 Copy_TIM_INT_Mask, u8 Copy_En_Dis)
{
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	00 d0       	rcall	.+0      	; 0x2658 <Timers_voidEn_Dis_Interrupt+0x6>
    2658:	00 d0       	rcall	.+0      	; 0x265a <Timers_voidEn_Dis_Interrupt+0x8>
    265a:	00 d0       	rcall	.+0      	; 0x265c <Timers_voidEn_Dis_Interrupt+0xa>
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	9b 83       	std	Y+3, r25	; 0x03
    2662:	8a 83       	std	Y+2, r24	; 0x02
    2664:	6c 83       	std	Y+4, r22	; 0x04
	u8 	Local_u8ErrorState = OK;
    2666:	82 e0       	ldi	r24, 0x02	; 2
    2668:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_TIM_INT_Mask)
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	9b 81       	ldd	r25, Y+3	; 0x03
    266e:	9e 83       	std	Y+6, r25	; 0x06
    2670:	8d 83       	std	Y+5, r24	; 0x05
    2672:	8d 81       	ldd	r24, Y+5	; 0x05
    2674:	9e 81       	ldd	r25, Y+6	; 0x06
    2676:	83 30       	cpi	r24, 0x03	; 3
    2678:	91 05       	cpc	r25, r1
    267a:	09 f4       	brne	.+2      	; 0x267e <Timers_voidEn_Dis_Interrupt+0x2c>
    267c:	6f c0       	rjmp	.+222    	; 0x275c <Timers_voidEn_Dis_Interrupt+0x10a>
    267e:	8d 81       	ldd	r24, Y+5	; 0x05
    2680:	9e 81       	ldd	r25, Y+6	; 0x06
    2682:	84 30       	cpi	r24, 0x04	; 4
    2684:	91 05       	cpc	r25, r1
    2686:	60 f4       	brcc	.+24     	; 0x26a0 <Timers_voidEn_Dis_Interrupt+0x4e>
    2688:	8d 81       	ldd	r24, Y+5	; 0x05
    268a:	9e 81       	ldd	r25, Y+6	; 0x06
    268c:	81 30       	cpi	r24, 0x01	; 1
    268e:	91 05       	cpc	r25, r1
    2690:	b9 f1       	breq	.+110    	; 0x2700 <Timers_voidEn_Dis_Interrupt+0xae>
    2692:	8d 81       	ldd	r24, Y+5	; 0x05
    2694:	9e 81       	ldd	r25, Y+6	; 0x06
    2696:	82 30       	cpi	r24, 0x02	; 2
    2698:	91 05       	cpc	r25, r1
    269a:	08 f0       	brcs	.+2      	; 0x269e <Timers_voidEn_Dis_Interrupt+0x4c>
    269c:	48 c0       	rjmp	.+144    	; 0x272e <Timers_voidEn_Dis_Interrupt+0xdc>
    269e:	19 c0       	rjmp	.+50     	; 0x26d2 <Timers_voidEn_Dis_Interrupt+0x80>
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	9e 81       	ldd	r25, Y+6	; 0x06
    26a4:	85 30       	cpi	r24, 0x05	; 5
    26a6:	91 05       	cpc	r25, r1
    26a8:	09 f4       	brne	.+2      	; 0x26ac <Timers_voidEn_Dis_Interrupt+0x5a>
    26aa:	86 c0       	rjmp	.+268    	; 0x27b8 <Timers_voidEn_Dis_Interrupt+0x166>
    26ac:	8d 81       	ldd	r24, Y+5	; 0x05
    26ae:	9e 81       	ldd	r25, Y+6	; 0x06
    26b0:	85 30       	cpi	r24, 0x05	; 5
    26b2:	91 05       	cpc	r25, r1
    26b4:	08 f4       	brcc	.+2      	; 0x26b8 <Timers_voidEn_Dis_Interrupt+0x66>
    26b6:	69 c0       	rjmp	.+210    	; 0x278a <Timers_voidEn_Dis_Interrupt+0x138>
    26b8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ba:	9e 81       	ldd	r25, Y+6	; 0x06
    26bc:	86 30       	cpi	r24, 0x06	; 6
    26be:	91 05       	cpc	r25, r1
    26c0:	09 f4       	brne	.+2      	; 0x26c4 <Timers_voidEn_Dis_Interrupt+0x72>
    26c2:	90 c0       	rjmp	.+288    	; 0x27e4 <Timers_voidEn_Dis_Interrupt+0x192>
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	9e 81       	ldd	r25, Y+6	; 0x06
    26c8:	87 30       	cpi	r24, 0x07	; 7
    26ca:	91 05       	cpc	r25, r1
    26cc:	09 f4       	brne	.+2      	; 0x26d0 <Timers_voidEn_Dis_Interrupt+0x7e>
    26ce:	a0 c0       	rjmp	.+320    	; 0x2810 <Timers_voidEn_Dis_Interrupt+0x1be>
    26d0:	b5 c0       	rjmp	.+362    	; 0x283c <Timers_voidEn_Dis_Interrupt+0x1ea>
	{
	//TIMER0 Overflow_Interrupt_Enable
	case TIM0_OVF_INT:
	{
		if(Copy_En_Dis == Enable)
    26d2:	8c 81       	ldd	r24, Y+4	; 0x04
    26d4:	81 30       	cpi	r24, 0x01	; 1
    26d6:	41 f4       	brne	.+16     	; 0x26e8 <Timers_voidEn_Dis_Interrupt+0x96>
		{
			SET_BIT(TIMSK_Register,TOIE0);
    26d8:	a9 e5       	ldi	r26, 0x59	; 89
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	e9 e5       	ldi	r30, 0x59	; 89
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	81 60       	ori	r24, 0x01	; 1
    26e4:	8c 93       	st	X, r24
    26e6:	ac c0       	rjmp	.+344    	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		}
		else if(Copy_En_Dis == Disable)
    26e8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ea:	88 23       	and	r24, r24
    26ec:	09 f0       	breq	.+2      	; 0x26f0 <Timers_voidEn_Dis_Interrupt+0x9e>
    26ee:	a8 c0       	rjmp	.+336    	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		{
			CLR_BIT(TIMSK_Register,TOIE0);
    26f0:	a9 e5       	ldi	r26, 0x59	; 89
    26f2:	b0 e0       	ldi	r27, 0x00	; 0
    26f4:	e9 e5       	ldi	r30, 0x59	; 89
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	80 81       	ld	r24, Z
    26fa:	8e 7f       	andi	r24, 0xFE	; 254
    26fc:	8c 93       	st	X, r24
    26fe:	a0 c0       	rjmp	.+320    	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		break;
	}
	//TIMER0 Compare Match Interrupt Enable
	case TIM0_Comp_INT:
	{
		if(Copy_En_Dis == Enable)
    2700:	8c 81       	ldd	r24, Y+4	; 0x04
    2702:	81 30       	cpi	r24, 0x01	; 1
    2704:	41 f4       	brne	.+16     	; 0x2716 <Timers_voidEn_Dis_Interrupt+0xc4>
		{
			SET_BIT(TIMSK_Register,OCIE0);
    2706:	a9 e5       	ldi	r26, 0x59	; 89
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	e9 e5       	ldi	r30, 0x59	; 89
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	82 60       	ori	r24, 0x02	; 2
    2712:	8c 93       	st	X, r24
    2714:	95 c0       	rjmp	.+298    	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		}
		else if(Copy_En_Dis == Disable)
    2716:	8c 81       	ldd	r24, Y+4	; 0x04
    2718:	88 23       	and	r24, r24
    271a:	09 f0       	breq	.+2      	; 0x271e <Timers_voidEn_Dis_Interrupt+0xcc>
    271c:	91 c0       	rjmp	.+290    	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		{
			CLR_BIT(TIMSK_Register,OCIE0);
    271e:	a9 e5       	ldi	r26, 0x59	; 89
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	e9 e5       	ldi	r30, 0x59	; 89
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	8d 7f       	andi	r24, 0xFD	; 253
    272a:	8c 93       	st	X, r24
    272c:	89 c0       	rjmp	.+274    	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		break;
	}
	//Input_Capture_Interrupt_Enable
	case TIM1_ICU_INT:
	{
		if(Copy_En_Dis == Enable)
    272e:	8c 81       	ldd	r24, Y+4	; 0x04
    2730:	81 30       	cpi	r24, 0x01	; 1
    2732:	41 f4       	brne	.+16     	; 0x2744 <Timers_voidEn_Dis_Interrupt+0xf2>
		{
			SET_BIT(TIMSK_Register,TICIE1);
    2734:	a9 e5       	ldi	r26, 0x59	; 89
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e9 e5       	ldi	r30, 0x59	; 89
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	80 62       	ori	r24, 0x20	; 32
    2740:	8c 93       	st	X, r24
    2742:	7e c0       	rjmp	.+252    	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		}
		else if(Copy_En_Dis == Disable)
    2744:	8c 81       	ldd	r24, Y+4	; 0x04
    2746:	88 23       	and	r24, r24
    2748:	09 f0       	breq	.+2      	; 0x274c <Timers_voidEn_Dis_Interrupt+0xfa>
    274a:	7a c0       	rjmp	.+244    	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		{
			CLR_BIT(TIMSK_Register,TICIE1);
    274c:	a9 e5       	ldi	r26, 0x59	; 89
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	e9 e5       	ldi	r30, 0x59	; 89
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	8f 7d       	andi	r24, 0xDF	; 223
    2758:	8c 93       	st	X, r24
    275a:	72 c0       	rjmp	.+228    	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		break;
	}
	//TIMER1 Compare A Match Interrupt Enable
	case TIM1_Comp_A_INT:
	{
		if(Copy_En_Dis == Enable)
    275c:	8c 81       	ldd	r24, Y+4	; 0x04
    275e:	81 30       	cpi	r24, 0x01	; 1
    2760:	41 f4       	brne	.+16     	; 0x2772 <Timers_voidEn_Dis_Interrupt+0x120>
		{
			SET_BIT(TIMSK_Register,OCIE1A);
    2762:	a9 e5       	ldi	r26, 0x59	; 89
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	e9 e5       	ldi	r30, 0x59	; 89
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	80 61       	ori	r24, 0x10	; 16
    276e:	8c 93       	st	X, r24
    2770:	67 c0       	rjmp	.+206    	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		}
		else if(Copy_En_Dis == Disable)
    2772:	8c 81       	ldd	r24, Y+4	; 0x04
    2774:	88 23       	and	r24, r24
    2776:	09 f0       	breq	.+2      	; 0x277a <Timers_voidEn_Dis_Interrupt+0x128>
    2778:	63 c0       	rjmp	.+198    	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		{
			CLR_BIT(TIMSK_Register,OCIE1A);
    277a:	a9 e5       	ldi	r26, 0x59	; 89
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e9 e5       	ldi	r30, 0x59	; 89
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	8f 7e       	andi	r24, 0xEF	; 239
    2786:	8c 93       	st	X, r24
    2788:	5b c0       	rjmp	.+182    	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
	}
	//TIMER1 Compare B Match Interrupt Enable
	case TIM1_Comp_B_INT:
	{

		if(Copy_En_Dis == Enable)
    278a:	8c 81       	ldd	r24, Y+4	; 0x04
    278c:	81 30       	cpi	r24, 0x01	; 1
    278e:	41 f4       	brne	.+16     	; 0x27a0 <Timers_voidEn_Dis_Interrupt+0x14e>
		{
			SET_BIT(TIMSK_Register,OCIE1B);
    2790:	a9 e5       	ldi	r26, 0x59	; 89
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	e9 e5       	ldi	r30, 0x59	; 89
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	88 60       	ori	r24, 0x08	; 8
    279c:	8c 93       	st	X, r24
    279e:	50 c0       	rjmp	.+160    	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		}
		else if(Copy_En_Dis == Disable)
    27a0:	8c 81       	ldd	r24, Y+4	; 0x04
    27a2:	88 23       	and	r24, r24
    27a4:	09 f0       	breq	.+2      	; 0x27a8 <Timers_voidEn_Dis_Interrupt+0x156>
    27a6:	4c c0       	rjmp	.+152    	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		{
			CLR_BIT(TIMSK_Register,OCIE1B);
    27a8:	a9 e5       	ldi	r26, 0x59	; 89
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	e9 e5       	ldi	r30, 0x59	; 89
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	87 7f       	andi	r24, 0xF7	; 247
    27b4:	8c 93       	st	X, r24
    27b6:	44 c0       	rjmp	.+136    	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		break;
	}
	//TIMER1 Overflow_Interrupt_Enable
	case TIM1_OVF_INT:
	{
		if(Copy_En_Dis == Enable)
    27b8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ba:	81 30       	cpi	r24, 0x01	; 1
    27bc:	41 f4       	brne	.+16     	; 0x27ce <Timers_voidEn_Dis_Interrupt+0x17c>
		{
			SET_BIT(TIMSK_Register,TOIE1);
    27be:	a9 e5       	ldi	r26, 0x59	; 89
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	e9 e5       	ldi	r30, 0x59	; 89
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	84 60       	ori	r24, 0x04	; 4
    27ca:	8c 93       	st	X, r24
    27cc:	39 c0       	rjmp	.+114    	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		}
		else if(Copy_En_Dis == Disable)
    27ce:	8c 81       	ldd	r24, Y+4	; 0x04
    27d0:	88 23       	and	r24, r24
    27d2:	b1 f5       	brne	.+108    	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		{
			CLR_BIT(TIMSK_Register,TOIE1);
    27d4:	a9 e5       	ldi	r26, 0x59	; 89
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e9 e5       	ldi	r30, 0x59	; 89
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	8b 7f       	andi	r24, 0xFB	; 251
    27e0:	8c 93       	st	X, r24
    27e2:	2e c0       	rjmp	.+92     	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		break;
	}
	//TIMER2 Overflow_Interrupt_Enable
	case TIM2_OVF_INT:
	{
		if(Copy_En_Dis == Enable)
    27e4:	8c 81       	ldd	r24, Y+4	; 0x04
    27e6:	81 30       	cpi	r24, 0x01	; 1
    27e8:	41 f4       	brne	.+16     	; 0x27fa <Timers_voidEn_Dis_Interrupt+0x1a8>
		{
			SET_BIT(TIMSK_Register,TOIE2);
    27ea:	a9 e5       	ldi	r26, 0x59	; 89
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	e9 e5       	ldi	r30, 0x59	; 89
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	80 64       	ori	r24, 0x40	; 64
    27f6:	8c 93       	st	X, r24
    27f8:	23 c0       	rjmp	.+70     	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		}
		else if(Copy_En_Dis == Disable)
    27fa:	8c 81       	ldd	r24, Y+4	; 0x04
    27fc:	88 23       	and	r24, r24
    27fe:	01 f5       	brne	.+64     	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		{
			CLR_BIT(TIMSK_Register,TOIE2);
    2800:	a9 e5       	ldi	r26, 0x59	; 89
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	e9 e5       	ldi	r30, 0x59	; 89
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	8f 7b       	andi	r24, 0xBF	; 191
    280c:	8c 93       	st	X, r24
    280e:	18 c0       	rjmp	.+48     	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		break;
	}
	//TIMER2 Compare Match Interrupt Enable
	case TIM2_Comp_INT:
	{
		if(Copy_En_Dis == Enable)
    2810:	8c 81       	ldd	r24, Y+4	; 0x04
    2812:	81 30       	cpi	r24, 0x01	; 1
    2814:	41 f4       	brne	.+16     	; 0x2826 <Timers_voidEn_Dis_Interrupt+0x1d4>
		{
			SET_BIT(TIMSK_Register,OCIE2);
    2816:	a9 e5       	ldi	r26, 0x59	; 89
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e9 e5       	ldi	r30, 0x59	; 89
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	80 68       	ori	r24, 0x80	; 128
    2822:	8c 93       	st	X, r24
    2824:	0d c0       	rjmp	.+26     	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		}
		else if(Copy_En_Dis == Disable)
    2826:	8c 81       	ldd	r24, Y+4	; 0x04
    2828:	88 23       	and	r24, r24
    282a:	51 f4       	brne	.+20     	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		{
			CLR_BIT(TIMSK_Register,OCIE2);
    282c:	a9 e5       	ldi	r26, 0x59	; 89
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	e9 e5       	ldi	r30, 0x59	; 89
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	8f 77       	andi	r24, 0x7F	; 127
    2838:	8c 93       	st	X, r24
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <Timers_voidEn_Dis_Interrupt+0x1ee>
		}
		break;
	}
	default:
	{
		Local_u8ErrorState = NOK;
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	}
}
    2840:	26 96       	adiw	r28, 0x06	; 6
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	de bf       	out	0x3e, r29	; 62
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	cd bf       	out	0x3d, r28	; 61
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <TIMERS_u8SetCallBack>:

u8 TIMERS_u8SetCallBack(void (*Copy_pvCallBackFunc[8])(void), u16 INT_Name)
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	00 d0       	rcall	.+0      	; 0x2858 <TIMERS_u8SetCallBack+0x6>
    2858:	00 d0       	rcall	.+0      	; 0x285a <TIMERS_u8SetCallBack+0x8>
    285a:	0f 92       	push	r0
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	9b 83       	std	Y+3, r25	; 0x03
    2862:	8a 83       	std	Y+2, r24	; 0x02
    2864:	7d 83       	std	Y+5, r23	; 0x05
    2866:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorStatus = OK;
    2868:	82 e0       	ldi	r24, 0x02	; 2
    286a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pvCallBackFunc[INT_Name] != NULL)
    286c:	8c 81       	ldd	r24, Y+4	; 0x04
    286e:	9d 81       	ldd	r25, Y+5	; 0x05
    2870:	9c 01       	movw	r18, r24
    2872:	22 0f       	add	r18, r18
    2874:	33 1f       	adc	r19, r19
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	9b 81       	ldd	r25, Y+3	; 0x03
    287a:	fc 01       	movw	r30, r24
    287c:	e2 0f       	add	r30, r18
    287e:	f3 1f       	adc	r31, r19
    2880:	80 81       	ld	r24, Z
    2882:	91 81       	ldd	r25, Z+1	; 0x01
    2884:	00 97       	sbiw	r24, 0x00	; 0
    2886:	61 f0       	breq	.+24     	; 0x28a0 <TIMERS_u8SetCallBack+0x4e>
	{
		TIMERS_pvCallBack_Func[INT_Name] = Copy_pvCallBackFunc;
    2888:	8c 81       	ldd	r24, Y+4	; 0x04
    288a:	9d 81       	ldd	r25, Y+5	; 0x05
    288c:	2a 81       	ldd	r18, Y+2	; 0x02
    288e:	3b 81       	ldd	r19, Y+3	; 0x03
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	fc 01       	movw	r30, r24
    2896:	ee 54       	subi	r30, 0x4E	; 78
    2898:	fd 4f       	sbci	r31, 0xFD	; 253
    289a:	31 83       	std	Z+1, r19	; 0x01
    289c:	20 83       	st	Z, r18
    289e:	02 c0       	rjmp	.+4      	; 0x28a4 <TIMERS_u8SetCallBack+0x52>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
    28a0:	83 e0       	ldi	r24, 0x03	; 3
    28a2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <__vector_4>:


//TIMER2 COMP
void __vector_4 (void) __attribute__((signal));
void __vector_4 (void)
{
    28b6:	1f 92       	push	r1
    28b8:	0f 92       	push	r0
    28ba:	0f b6       	in	r0, 0x3f	; 63
    28bc:	0f 92       	push	r0
    28be:	11 24       	eor	r1, r1
    28c0:	2f 93       	push	r18
    28c2:	3f 93       	push	r19
    28c4:	4f 93       	push	r20
    28c6:	5f 93       	push	r21
    28c8:	6f 93       	push	r22
    28ca:	7f 93       	push	r23
    28cc:	8f 93       	push	r24
    28ce:	9f 93       	push	r25
    28d0:	af 93       	push	r26
    28d2:	bf 93       	push	r27
    28d4:	ef 93       	push	r30
    28d6:	ff 93       	push	r31
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBack_Func!= NULL)
		TIMERS_pvCallBack_Func[TIM2_Comp_INT]();
    28e0:	e0 91 c0 02 	lds	r30, 0x02C0
    28e4:	f0 91 c1 02 	lds	r31, 0x02C1
    28e8:	09 95       	icall
}
    28ea:	cf 91       	pop	r28
    28ec:	df 91       	pop	r29
    28ee:	ff 91       	pop	r31
    28f0:	ef 91       	pop	r30
    28f2:	bf 91       	pop	r27
    28f4:	af 91       	pop	r26
    28f6:	9f 91       	pop	r25
    28f8:	8f 91       	pop	r24
    28fa:	7f 91       	pop	r23
    28fc:	6f 91       	pop	r22
    28fe:	5f 91       	pop	r21
    2900:	4f 91       	pop	r20
    2902:	3f 91       	pop	r19
    2904:	2f 91       	pop	r18
    2906:	0f 90       	pop	r0
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	0f 90       	pop	r0
    290c:	1f 90       	pop	r1
    290e:	18 95       	reti

00002910 <__vector_5>:

//TIMER2 Over flow
void __vector_5 (void) __attribute__((signal));
void __vector_5 (void)
{
    2910:	1f 92       	push	r1
    2912:	0f 92       	push	r0
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	0f 92       	push	r0
    2918:	11 24       	eor	r1, r1
    291a:	2f 93       	push	r18
    291c:	3f 93       	push	r19
    291e:	4f 93       	push	r20
    2920:	5f 93       	push	r21
    2922:	6f 93       	push	r22
    2924:	7f 93       	push	r23
    2926:	8f 93       	push	r24
    2928:	9f 93       	push	r25
    292a:	af 93       	push	r26
    292c:	bf 93       	push	r27
    292e:	ef 93       	push	r30
    2930:	ff 93       	push	r31
    2932:	df 93       	push	r29
    2934:	cf 93       	push	r28
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBack_Func!= NULL)
		TIMERS_pvCallBack_Func[TIM2_OVF_INT]();
    293a:	e0 91 be 02 	lds	r30, 0x02BE
    293e:	f0 91 bf 02 	lds	r31, 0x02BF
    2942:	09 95       	icall
}
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	ff 91       	pop	r31
    294a:	ef 91       	pop	r30
    294c:	bf 91       	pop	r27
    294e:	af 91       	pop	r26
    2950:	9f 91       	pop	r25
    2952:	8f 91       	pop	r24
    2954:	7f 91       	pop	r23
    2956:	6f 91       	pop	r22
    2958:	5f 91       	pop	r21
    295a:	4f 91       	pop	r20
    295c:	3f 91       	pop	r19
    295e:	2f 91       	pop	r18
    2960:	0f 90       	pop	r0
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	0f 90       	pop	r0
    2966:	1f 90       	pop	r1
    2968:	18 95       	reti

0000296a <__vector_6>:

//TIMER1 ICU_Capt
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    296a:	1f 92       	push	r1
    296c:	0f 92       	push	r0
    296e:	0f b6       	in	r0, 0x3f	; 63
    2970:	0f 92       	push	r0
    2972:	11 24       	eor	r1, r1
    2974:	2f 93       	push	r18
    2976:	3f 93       	push	r19
    2978:	4f 93       	push	r20
    297a:	5f 93       	push	r21
    297c:	6f 93       	push	r22
    297e:	7f 93       	push	r23
    2980:	8f 93       	push	r24
    2982:	9f 93       	push	r25
    2984:	af 93       	push	r26
    2986:	bf 93       	push	r27
    2988:	ef 93       	push	r30
    298a:	ff 93       	push	r31
    298c:	df 93       	push	r29
    298e:	cf 93       	push	r28
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBack_Func!= NULL)
		TIMERS_pvCallBack_Func[TIM1_ICU_INT]();
    2994:	e0 91 b6 02 	lds	r30, 0x02B6
    2998:	f0 91 b7 02 	lds	r31, 0x02B7
    299c:	09 95       	icall
}
    299e:	cf 91       	pop	r28
    29a0:	df 91       	pop	r29
    29a2:	ff 91       	pop	r31
    29a4:	ef 91       	pop	r30
    29a6:	bf 91       	pop	r27
    29a8:	af 91       	pop	r26
    29aa:	9f 91       	pop	r25
    29ac:	8f 91       	pop	r24
    29ae:	7f 91       	pop	r23
    29b0:	6f 91       	pop	r22
    29b2:	5f 91       	pop	r21
    29b4:	4f 91       	pop	r20
    29b6:	3f 91       	pop	r19
    29b8:	2f 91       	pop	r18
    29ba:	0f 90       	pop	r0
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	0f 90       	pop	r0
    29c0:	1f 90       	pop	r1
    29c2:	18 95       	reti

000029c4 <__vector_7>:


//TIMER1 COMPA
void __vector_7 (void)__attribute__((signal));
void __vector_7 (void)
{
    29c4:	1f 92       	push	r1
    29c6:	0f 92       	push	r0
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	0f 92       	push	r0
    29cc:	11 24       	eor	r1, r1
    29ce:	2f 93       	push	r18
    29d0:	3f 93       	push	r19
    29d2:	4f 93       	push	r20
    29d4:	5f 93       	push	r21
    29d6:	6f 93       	push	r22
    29d8:	7f 93       	push	r23
    29da:	8f 93       	push	r24
    29dc:	9f 93       	push	r25
    29de:	af 93       	push	r26
    29e0:	bf 93       	push	r27
    29e2:	ef 93       	push	r30
    29e4:	ff 93       	push	r31
    29e6:	df 93       	push	r29
    29e8:	cf 93       	push	r28
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBack_Func!= NULL)
		TIMERS_pvCallBack_Func[TIM1_Comp_A_INT]();
    29ee:	e0 91 b8 02 	lds	r30, 0x02B8
    29f2:	f0 91 b9 02 	lds	r31, 0x02B9
    29f6:	09 95       	icall
}
    29f8:	cf 91       	pop	r28
    29fa:	df 91       	pop	r29
    29fc:	ff 91       	pop	r31
    29fe:	ef 91       	pop	r30
    2a00:	bf 91       	pop	r27
    2a02:	af 91       	pop	r26
    2a04:	9f 91       	pop	r25
    2a06:	8f 91       	pop	r24
    2a08:	7f 91       	pop	r23
    2a0a:	6f 91       	pop	r22
    2a0c:	5f 91       	pop	r21
    2a0e:	4f 91       	pop	r20
    2a10:	3f 91       	pop	r19
    2a12:	2f 91       	pop	r18
    2a14:	0f 90       	pop	r0
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	0f 90       	pop	r0
    2a1a:	1f 90       	pop	r1
    2a1c:	18 95       	reti

00002a1e <__vector_8>:

//TIMER1 COMPB
void __vector_8 (void) __attribute__((signal));
void __vector_8 (void)
{
    2a1e:	1f 92       	push	r1
    2a20:	0f 92       	push	r0
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	0f 92       	push	r0
    2a26:	11 24       	eor	r1, r1
    2a28:	2f 93       	push	r18
    2a2a:	3f 93       	push	r19
    2a2c:	4f 93       	push	r20
    2a2e:	5f 93       	push	r21
    2a30:	6f 93       	push	r22
    2a32:	7f 93       	push	r23
    2a34:	8f 93       	push	r24
    2a36:	9f 93       	push	r25
    2a38:	af 93       	push	r26
    2a3a:	bf 93       	push	r27
    2a3c:	ef 93       	push	r30
    2a3e:	ff 93       	push	r31
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBack_Func!= NULL)
		TIMERS_pvCallBack_Func[TIM1_Comp_B_INT]();
    2a48:	e0 91 ba 02 	lds	r30, 0x02BA
    2a4c:	f0 91 bb 02 	lds	r31, 0x02BB
    2a50:	09 95       	icall
}
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	ff 91       	pop	r31
    2a58:	ef 91       	pop	r30
    2a5a:	bf 91       	pop	r27
    2a5c:	af 91       	pop	r26
    2a5e:	9f 91       	pop	r25
    2a60:	8f 91       	pop	r24
    2a62:	7f 91       	pop	r23
    2a64:	6f 91       	pop	r22
    2a66:	5f 91       	pop	r21
    2a68:	4f 91       	pop	r20
    2a6a:	3f 91       	pop	r19
    2a6c:	2f 91       	pop	r18
    2a6e:	0f 90       	pop	r0
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	0f 90       	pop	r0
    2a74:	1f 90       	pop	r1
    2a76:	18 95       	reti

00002a78 <__vector_9>:

//TIMER1 Over flow
void __vector_9 (void) __attribute__((signal));
void __vector_9 (void)
{
    2a78:	1f 92       	push	r1
    2a7a:	0f 92       	push	r0
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	0f 92       	push	r0
    2a80:	11 24       	eor	r1, r1
    2a82:	2f 93       	push	r18
    2a84:	3f 93       	push	r19
    2a86:	4f 93       	push	r20
    2a88:	5f 93       	push	r21
    2a8a:	6f 93       	push	r22
    2a8c:	7f 93       	push	r23
    2a8e:	8f 93       	push	r24
    2a90:	9f 93       	push	r25
    2a92:	af 93       	push	r26
    2a94:	bf 93       	push	r27
    2a96:	ef 93       	push	r30
    2a98:	ff 93       	push	r31
    2a9a:	df 93       	push	r29
    2a9c:	cf 93       	push	r28
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBack_Func!= NULL)
		TIMERS_pvCallBack_Func[TIM1_OVF_INT]();
    2aa2:	e0 91 bc 02 	lds	r30, 0x02BC
    2aa6:	f0 91 bd 02 	lds	r31, 0x02BD
    2aaa:	09 95       	icall
}
    2aac:	cf 91       	pop	r28
    2aae:	df 91       	pop	r29
    2ab0:	ff 91       	pop	r31
    2ab2:	ef 91       	pop	r30
    2ab4:	bf 91       	pop	r27
    2ab6:	af 91       	pop	r26
    2ab8:	9f 91       	pop	r25
    2aba:	8f 91       	pop	r24
    2abc:	7f 91       	pop	r23
    2abe:	6f 91       	pop	r22
    2ac0:	5f 91       	pop	r21
    2ac2:	4f 91       	pop	r20
    2ac4:	3f 91       	pop	r19
    2ac6:	2f 91       	pop	r18
    2ac8:	0f 90       	pop	r0
    2aca:	0f be       	out	0x3f, r0	; 63
    2acc:	0f 90       	pop	r0
    2ace:	1f 90       	pop	r1
    2ad0:	18 95       	reti

00002ad2 <__vector_10>:

//TIMER0 COMP
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    2ad2:	1f 92       	push	r1
    2ad4:	0f 92       	push	r0
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	0f 92       	push	r0
    2ada:	11 24       	eor	r1, r1
    2adc:	2f 93       	push	r18
    2ade:	3f 93       	push	r19
    2ae0:	4f 93       	push	r20
    2ae2:	5f 93       	push	r21
    2ae4:	6f 93       	push	r22
    2ae6:	7f 93       	push	r23
    2ae8:	8f 93       	push	r24
    2aea:	9f 93       	push	r25
    2aec:	af 93       	push	r26
    2aee:	bf 93       	push	r27
    2af0:	ef 93       	push	r30
    2af2:	ff 93       	push	r31
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBack_Func!= NULL)
		TIMERS_pvCallBack_Func[TIM0_Comp_INT]();
    2afc:	e0 91 b4 02 	lds	r30, 0x02B4
    2b00:	f0 91 b5 02 	lds	r31, 0x02B5
    2b04:	09 95       	icall
}
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	ff 91       	pop	r31
    2b0c:	ef 91       	pop	r30
    2b0e:	bf 91       	pop	r27
    2b10:	af 91       	pop	r26
    2b12:	9f 91       	pop	r25
    2b14:	8f 91       	pop	r24
    2b16:	7f 91       	pop	r23
    2b18:	6f 91       	pop	r22
    2b1a:	5f 91       	pop	r21
    2b1c:	4f 91       	pop	r20
    2b1e:	3f 91       	pop	r19
    2b20:	2f 91       	pop	r18
    2b22:	0f 90       	pop	r0
    2b24:	0f be       	out	0x3f, r0	; 63
    2b26:	0f 90       	pop	r0
    2b28:	1f 90       	pop	r1
    2b2a:	18 95       	reti

00002b2c <__vector_11>:

//TIMER0 Overflow
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    2b2c:	1f 92       	push	r1
    2b2e:	0f 92       	push	r0
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	0f 92       	push	r0
    2b34:	11 24       	eor	r1, r1
    2b36:	2f 93       	push	r18
    2b38:	3f 93       	push	r19
    2b3a:	4f 93       	push	r20
    2b3c:	5f 93       	push	r21
    2b3e:	6f 93       	push	r22
    2b40:	7f 93       	push	r23
    2b42:	8f 93       	push	r24
    2b44:	9f 93       	push	r25
    2b46:	af 93       	push	r26
    2b48:	bf 93       	push	r27
    2b4a:	ef 93       	push	r30
    2b4c:	ff 93       	push	r31
    2b4e:	df 93       	push	r29
    2b50:	cf 93       	push	r28
    2b52:	cd b7       	in	r28, 0x3d	; 61
    2b54:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBack_Func!= NULL)
		TIMERS_pvCallBack_Func[TIM0_OVF_INT]();
    2b56:	e0 91 b2 02 	lds	r30, 0x02B2
    2b5a:	f0 91 b3 02 	lds	r31, 0x02B3
    2b5e:	09 95       	icall
}
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	ff 91       	pop	r31
    2b66:	ef 91       	pop	r30
    2b68:	bf 91       	pop	r27
    2b6a:	af 91       	pop	r26
    2b6c:	9f 91       	pop	r25
    2b6e:	8f 91       	pop	r24
    2b70:	7f 91       	pop	r23
    2b72:	6f 91       	pop	r22
    2b74:	5f 91       	pop	r21
    2b76:	4f 91       	pop	r20
    2b78:	3f 91       	pop	r19
    2b7a:	2f 91       	pop	r18
    2b7c:	0f 90       	pop	r0
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	0f 90       	pop	r0
    2b82:	1f 90       	pop	r1
    2b84:	18 95       	reti

00002b86 <USART_Init>:
#include"UART_Interface.h"
#include"avr/delay.h"


void USART_Init(void)
{
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	0f 92       	push	r0
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
	//#define	UCSRC_URSEL                   0b10000000          	// Register UCSRC Select

	u8 Local_u8UCSRCValue = 0;
    2b90:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(Local_u8UCSRCValue,UCSRC_URSEL);
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	80 68       	ori	r24, 0x80	; 128
    2b96:	89 83       	std	Y+1, r24	; 0x01


	//UBRRL = 51;                               //baud Rate 9600
	UBRRL = BAUD_PRESCALE;		/* Load lower 8-bits of the baud rate value */
    2b98:	e9 e2       	ldi	r30, 0x29	; 41
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	83 e3       	ldi	r24, 0x33	; 51
    2b9e:	80 83       	st	Z, r24
	UBRRH = (BAUD_PRESCALE >> 8);	/* Load upper 8-bits*/
    2ba0:	e0 e4       	ldi	r30, 0x40	; 64
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	10 82       	st	Z, r1

	//Double the USART Transmission Speed
#if Double_USART_TX_Speed == Speed
	//TX Speed
	CLR_BIT(UCSRA,UCSRA_U2X);
    2ba6:	ab e2       	ldi	r26, 0x2B	; 43
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	eb e2       	ldi	r30, 0x2B	; 43
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	8d 7f       	andi	r24, 0xFD	; 253
    2bb2:	8c 93       	st	X, r24
#endif

	//A USART Receive Complete Interrupt
#if USART_Receive_Complete_INT == Disabled
	//RX Complete Interrupt Enable
	CLR_BIT(UCSRB,UCSRB_RXCIE);
    2bb4:	aa e2       	ldi	r26, 0x2A	; 42
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	ea e2       	ldi	r30, 0x2A	; 42
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	8f 77       	andi	r24, 0x7F	; 127
    2bc0:	8c 93       	st	X, r24
#endif

	//A USART Transmit Complete Interrupt
#if USART_Transmit_Complete_INT == Disabled
	//TX Complete Interrupt Enable
	CLR_BIT(UCSRB,UCSRB_TXCIE);
    2bc2:	aa e2       	ldi	r26, 0x2A	; 42
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	ea e2       	ldi	r30, 0x2A	; 42
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	8f 7b       	andi	r24, 0xBF	; 191
    2bce:	8c 93       	st	X, r24
#endif

	//Data Register Empty Interrupt
#if USART_Data_Register_Empty_INT == Enabled
	//USART Data Register Empty Interrupt Enable
	SET_BIT(UCSRB,UCSRB_UDRIE);
    2bd0:	aa e2       	ldi	r26, 0x2A	; 42
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	ea e2       	ldi	r30, 0x2A	; 42
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	80 62       	ori	r24, 0x20	; 32
    2bdc:	8c 93       	st	X, r24
#endif

	//USART Receiver
#if Receiver_Enable == Enabled
	//Receiver Enable
	SET_BIT(UCSRB,UCSRB_RXEN);
    2bde:	aa e2       	ldi	r26, 0x2A	; 42
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	ea e2       	ldi	r30, 0x2A	; 42
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	80 61       	ori	r24, 0x10	; 16
    2bea:	8c 93       	st	X, r24
#endif

	//USART Transmitter
#if Transmitter_Enable == Enabled
	//Transmitter Enable
	SET_BIT(UCSRB,UCSRB_TXEN);
    2bec:	aa e2       	ldi	r26, 0x2A	; 42
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	ea e2       	ldi	r30, 0x2A	; 42
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	88 60       	ori	r24, 0x08	; 8
    2bf8:	8c 93       	st	X, r24
#error "Wrong Option"
#endif

#if Receive_Data_Bit8 == Disabled
	//Receive_Data_Bit8 Disable
	CLR_BIT(UCSRB,UCSRB_RXB8);
    2bfa:	aa e2       	ldi	r26, 0x2A	; 42
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	ea e2       	ldi	r30, 0x2A	; 42
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	8d 7f       	andi	r24, 0xFD	; 253
    2c06:	8c 93       	st	X, r24
#endif

	//TXB8 is the ninth data bit of the received character
#if Transmit_Data_Bit8 == Disabled
	//Transmit_Data_Bit8
	CLR_BIT(UCSRB,UCSRB_TXB8);
    2c08:	aa e2       	ldi	r26, 0x2A	; 42
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	ea e2       	ldi	r30, 0x2A	; 42
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	8e 7f       	andi	r24, 0xFE	; 254
    2c14:	8c 93       	st	X, r24
#error "Wrong Option"
#endif

	//USART Mode Select
#if Mode_Select == Asynchronous
	CLR_BIT(UCSRC,UCSRC_UMSEL);
    2c16:	a0 e4       	ldi	r26, 0x40	; 64
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	e0 e4       	ldi	r30, 0x40	; 64
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	8f 7b       	andi	r24, 0xBF	; 191
    2c22:	8c 93       	st	X, r24
#error "Wrong USART Mode Select option"
#endif

	//USART Stop Bit Select
#if Stop_Bit_Select == bit_1
	CLR_BIT(Local_u8UCSRCValue,UCSRC_USBS);
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	87 7f       	andi	r24, 0xF7	; 247
    2c28:	89 83       	std	Y+1, r24	; 0x01
#error "Wrong USART Stop_Bit_Select option"
#endif

	//USART Parity Mode
#if Mode_Parity == Dis_Parity                              //Disabled
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UPM1);
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	8f 7d       	andi	r24, 0xDF	; 223
    2c2e:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UPM0);
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	8f 7e       	andi	r24, 0xEF	; 239
    2c34:	89 83       	std	Y+1, r24	; 0x01
#elif Character_Size == bit_7                                    //bit_7
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UCSZ0);
	SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ1);
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
#elif Character_Size == bit_8                                    //bit_8
	SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ0);
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	82 60       	ori	r24, 0x02	; 2
    2c3a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ1);
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	84 60       	ori	r24, 0x04	; 4
    2c40:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    2c42:	aa e2       	ldi	r26, 0x2A	; 42
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	ea e2       	ldi	r30, 0x2A	; 42
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	8b 7f       	andi	r24, 0xFB	; 251
    2c4e:	8c 93       	st	X, r24
#error "Wrong USART Character_Size option"
#endif

	//Clock_Polarity in Synchronous mode case Transmitted Data Changed (Output of TxD Pin)
#if Clock_Polarity_TX == Rising_TX
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UCPOL);
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
    2c52:	8e 7f       	andi	r24, 0xFE	; 254
    2c54:	89 83       	std	Y+1, r24	; 0x01
	//Clock_Polarity in Synchronous mode case Received Data Sampled (Input on RxD Pin)
#if Clock_Polarity_RX == Rising_RX
	SET_BIT(UCSRC,UCSRC_UCPOL);

#elif Clock_Polarity_RX == Falling_RX
	CLR_BIT(UCSRC,UCSRC_UCPOL);
    2c56:	a0 e4       	ldi	r26, 0x40	; 64
    2c58:	b0 e0       	ldi	r27, 0x00	; 0
    2c5a:	e0 e4       	ldi	r30, 0x40	; 64
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	8e 7f       	andi	r24, 0xFE	; 254
    2c62:	8c 93       	st	X, r24

#else
#error "Wrong USART Clock_Polarity RX option"
#endif

	UCSRC = Local_u8UCSRCValue;
    2c64:	e0 e4       	ldi	r30, 0x40	; 64
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	80 83       	st	Z, r24
}
    2c6c:	0f 90       	pop	r0
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	08 95       	ret

00002c74 <USART_voidReceive_char>:

u8 USART_voidReceive_char(void){
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62

	while(GET_BIT(UCSRA,UCSRA_RXC) == 0); //RX Complete
    2c7c:	eb e2       	ldi	r30, 0x2B	; 43
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	80 81       	ld	r24, Z
    2c82:	88 23       	and	r24, r24
    2c84:	dc f7       	brge	.-10     	; 0x2c7c <USART_voidReceive_char+0x8>

	return UDR ;
    2c86:	ec e2       	ldi	r30, 0x2C	; 44
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
}
    2c8c:	cf 91       	pop	r28
    2c8e:	df 91       	pop	r29
    2c90:	08 95       	ret

00002c92 <USART_voidSend_char>:

void USART_voidSend_char(u8 Data){
    2c92:	df 93       	push	r29
    2c94:	cf 93       	push	r28
    2c96:	0f 92       	push	r0
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
    2c9c:	89 83       	std	Y+1, r24	; 0x01

	while(GET_BIT(UCSRA,UCSRA_UDRE) == 0); //check register Empty or not
    2c9e:	eb e2       	ldi	r30, 0x2B	; 43
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	82 95       	swap	r24
    2ca6:	86 95       	lsr	r24
    2ca8:	87 70       	andi	r24, 0x07	; 7
    2caa:	88 2f       	mov	r24, r24
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	81 70       	andi	r24, 0x01	; 1
    2cb0:	90 70       	andi	r25, 0x00	; 0
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	a1 f3       	breq	.-24     	; 0x2c9e <USART_voidSend_char+0xc>

	UDR = Data;
    2cb6:	ec e2       	ldi	r30, 0x2C	; 44
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	80 83       	st	Z, r24
}
    2cbe:	0f 90       	pop	r0
    2cc0:	cf 91       	pop	r28
    2cc2:	df 91       	pop	r29
    2cc4:	08 95       	ret

00002cc6 <USART_vSendString>:

void USART_vSendString(u8 *str){
    2cc6:	df 93       	push	r29
    2cc8:	cf 93       	push	r28
    2cca:	00 d0       	rcall	.+0      	; 0x2ccc <USART_vSendString+0x6>
    2ccc:	0f 92       	push	r0
    2cce:	cd b7       	in	r28, 0x3d	; 61
    2cd0:	de b7       	in	r29, 0x3e	; 62
    2cd2:	9b 83       	std	Y+3, r25	; 0x03
    2cd4:	8a 83       	std	Y+2, r24	; 0x02

	u8 i = 0;
    2cd6:	19 82       	std	Y+1, r1	; 0x01
    2cd8:	0e c0       	rjmp	.+28     	; 0x2cf6 <USART_vSendString+0x30>
	while (str[i] !='\0') {
		USART_voidSend_char(str[i]);
    2cda:	89 81       	ldd	r24, Y+1	; 0x01
    2cdc:	28 2f       	mov	r18, r24
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce4:	fc 01       	movw	r30, r24
    2ce6:	e2 0f       	add	r30, r18
    2ce8:	f3 1f       	adc	r31, r19
    2cea:	80 81       	ld	r24, Z
    2cec:	0e 94 49 16 	call	0x2c92	; 0x2c92 <USART_voidSend_char>
		i++;
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	8f 5f       	subi	r24, 0xFF	; 255
    2cf4:	89 83       	std	Y+1, r24	; 0x01
}

void USART_vSendString(u8 *str){

	u8 i = 0;
	while (str[i] !='\0') {
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
    2cf8:	28 2f       	mov	r18, r24
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2d00:	fc 01       	movw	r30, r24
    2d02:	e2 0f       	add	r30, r18
    2d04:	f3 1f       	adc	r31, r19
    2d06:	80 81       	ld	r24, Z
    2d08:	88 23       	and	r24, r24
    2d0a:	39 f7       	brne	.-50     	; 0x2cda <USART_vSendString+0x14>
		USART_voidSend_char(str[i]);
		i++;
	}
	//USART_vSendString('\0');
}
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	cf 91       	pop	r28
    2d14:	df 91       	pop	r29
    2d16:	08 95       	ret

00002d18 <USART_vReceiveString>:

void USART_vReceiveString(u8 *str)
{
    2d18:	0f 93       	push	r16
    2d1a:	1f 93       	push	r17
    2d1c:	df 93       	push	r29
    2d1e:	cf 93       	push	r28
    2d20:	00 d0       	rcall	.+0      	; 0x2d22 <USART_vReceiveString+0xa>
    2d22:	0f 92       	push	r0
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    2d28:	9b 83       	std	Y+3, r25	; 0x03
    2d2a:	8a 83       	std	Y+2, r24	; 0x02

	u8 i = 0;
    2d2c:	19 82       	std	Y+1, r1	; 0x01
	str[i] = USART_voidReceive_char();
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	28 2f       	mov	r18, r24
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	8a 81       	ldd	r24, Y+2	; 0x02
    2d36:	9b 81       	ldd	r25, Y+3	; 0x03
    2d38:	8c 01       	movw	r16, r24
    2d3a:	02 0f       	add	r16, r18
    2d3c:	13 1f       	adc	r17, r19
    2d3e:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <USART_voidReceive_char>
    2d42:	f8 01       	movw	r30, r16
    2d44:	80 83       	st	Z, r24
    2d46:	0f c0       	rjmp	.+30     	; 0x2d66 <USART_vReceiveString+0x4e>

	while (str[i] !='#') {
	//while((str[i]) != '\0'){
		i++;
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	8f 5f       	subi	r24, 0xFF	; 255
    2d4c:	89 83       	std	Y+1, r24	; 0x01
		str[i] = USART_voidReceive_char();
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	28 2f       	mov	r18, r24
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	8a 81       	ldd	r24, Y+2	; 0x02
    2d56:	9b 81       	ldd	r25, Y+3	; 0x03
    2d58:	8c 01       	movw	r16, r24
    2d5a:	02 0f       	add	r16, r18
    2d5c:	13 1f       	adc	r17, r19
    2d5e:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <USART_voidReceive_char>
    2d62:	f8 01       	movw	r30, r16
    2d64:	80 83       	st	Z, r24
{

	u8 i = 0;
	str[i] = USART_voidReceive_char();

	while (str[i] !='#') {
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	28 2f       	mov	r18, r24
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d70:	fc 01       	movw	r30, r24
    2d72:	e2 0f       	add	r30, r18
    2d74:	f3 1f       	adc	r31, r19
    2d76:	80 81       	ld	r24, Z
    2d78:	83 32       	cpi	r24, 0x23	; 35
    2d7a:	31 f7       	brne	.-52     	; 0x2d48 <USART_vReceiveString+0x30>
	//while((str[i]) != '\0'){
		i++;
		str[i] = USART_voidReceive_char();
	}
	str[i] = '\0';
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	28 2f       	mov	r18, r24
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	8a 81       	ldd	r24, Y+2	; 0x02
    2d84:	9b 81       	ldd	r25, Y+3	; 0x03
    2d86:	fc 01       	movw	r30, r24
    2d88:	e2 0f       	add	r30, r18
    2d8a:	f3 1f       	adc	r31, r19
    2d8c:	10 82       	st	Z, r1
}
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	cf 91       	pop	r28
    2d96:	df 91       	pop	r29
    2d98:	1f 91       	pop	r17
    2d9a:	0f 91       	pop	r16
    2d9c:	08 95       	ret

00002d9e <CompareString>:

char CompareString(char arr1[10], char arr2[10])
{
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	00 d0       	rcall	.+0      	; 0x2da4 <CompareString+0x6>
    2da4:	00 d0       	rcall	.+0      	; 0x2da6 <CompareString+0x8>
    2da6:	00 d0       	rcall	.+0      	; 0x2da8 <CompareString+0xa>
    2da8:	cd b7       	in	r28, 0x3d	; 61
    2daa:	de b7       	in	r29, 0x3e	; 62
    2dac:	9c 83       	std	Y+4, r25	; 0x04
    2dae:	8b 83       	std	Y+3, r24	; 0x03
    2db0:	7e 83       	std	Y+6, r23	; 0x06
    2db2:	6d 83       	std	Y+5, r22	; 0x05
	u8 i = 0;
    2db4:	1a 82       	std	Y+2, r1	; 0x02
	char flag = 0;
    2db6:	19 82       	std	Y+1, r1	; 0x01
    2db8:	1b c0       	rjmp	.+54     	; 0x2df0 <CompareString+0x52>
	while(arr2[i] != '\0')
	{
		if(arr1[i] == arr2[i])
    2dba:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbc:	28 2f       	mov	r18, r24
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	e2 0f       	add	r30, r18
    2dc8:	f3 1f       	adc	r31, r19
    2dca:	40 81       	ld	r20, Z
    2dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dce:	28 2f       	mov	r18, r24
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	e2 0f       	add	r30, r18
    2dda:	f3 1f       	adc	r31, r19
    2ddc:	80 81       	ld	r24, Z
    2dde:	48 17       	cp	r20, r24
    2de0:	19 f4       	brne	.+6      	; 0x2de8 <CompareString+0x4a>
			flag = 1;
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	89 83       	std	Y+1, r24	; 0x01
    2de6:	01 c0       	rjmp	.+2      	; 0x2dea <CompareString+0x4c>
		else
			flag = 0;
    2de8:	19 82       	std	Y+1, r1	; 0x01
		i++;
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	8f 5f       	subi	r24, 0xFF	; 255
    2dee:	8a 83       	std	Y+2, r24	; 0x02

char CompareString(char arr1[10], char arr2[10])
{
	u8 i = 0;
	char flag = 0;
	while(arr2[i] != '\0')
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	28 2f       	mov	r18, r24
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	8d 81       	ldd	r24, Y+5	; 0x05
    2df8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	e2 0f       	add	r30, r18
    2dfe:	f3 1f       	adc	r31, r19
    2e00:	80 81       	ld	r24, Z
    2e02:	88 23       	and	r24, r24
    2e04:	d1 f6       	brne	.-76     	; 0x2dba <CompareString+0x1c>
			flag = 1;
		else
			flag = 0;
		i++;
	}
	return flag;
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e08:	26 96       	adiw	r28, 0x06	; 6
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	de bf       	out	0x3e, r29	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	cd bf       	out	0x3d, r28	; 61
    2e14:	cf 91       	pop	r28
    2e16:	df 91       	pop	r29
    2e18:	08 95       	ret

00002e1a <USART_voidSendNumber>:

void USART_voidSendNumber(u32 Cpy_Number)
{
    2e1a:	df 93       	push	r29
    2e1c:	cf 93       	push	r28
    2e1e:	00 d0       	rcall	.+0      	; 0x2e20 <USART_voidSendNumber+0x6>
    2e20:	00 d0       	rcall	.+0      	; 0x2e22 <USART_voidSendNumber+0x8>
    2e22:	cd b7       	in	r28, 0x3d	; 61
    2e24:	de b7       	in	r29, 0x3e	; 62
    2e26:	69 83       	std	Y+1, r22	; 0x01
    2e28:	7a 83       	std	Y+2, r23	; 0x02
    2e2a:	8b 83       	std	Y+3, r24	; 0x03
    2e2c:	9c 83       	std	Y+4, r25	; 0x04
	USART_voidSend_char((Cpy_Number/1000)+48);
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	9a 81       	ldd	r25, Y+2	; 0x02
    2e32:	ab 81       	ldd	r26, Y+3	; 0x03
    2e34:	bc 81       	ldd	r27, Y+4	; 0x04
    2e36:	28 ee       	ldi	r18, 0xE8	; 232
    2e38:	33 e0       	ldi	r19, 0x03	; 3
    2e3a:	40 e0       	ldi	r20, 0x00	; 0
    2e3c:	50 e0       	ldi	r21, 0x00	; 0
    2e3e:	bc 01       	movw	r22, r24
    2e40:	cd 01       	movw	r24, r26
    2e42:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodsi4>
    2e46:	da 01       	movw	r26, r20
    2e48:	c9 01       	movw	r24, r18
    2e4a:	80 5d       	subi	r24, 0xD0	; 208
    2e4c:	0e 94 49 16 	call	0x2c92	; 0x2c92 <USART_voidSend_char>
	USART_voidSend_char(((Cpy_Number%1000)/100)+48);
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	9a 81       	ldd	r25, Y+2	; 0x02
    2e54:	ab 81       	ldd	r26, Y+3	; 0x03
    2e56:	bc 81       	ldd	r27, Y+4	; 0x04
    2e58:	28 ee       	ldi	r18, 0xE8	; 232
    2e5a:	33 e0       	ldi	r19, 0x03	; 3
    2e5c:	40 e0       	ldi	r20, 0x00	; 0
    2e5e:	50 e0       	ldi	r21, 0x00	; 0
    2e60:	bc 01       	movw	r22, r24
    2e62:	cd 01       	movw	r24, r26
    2e64:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodsi4>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	24 e6       	ldi	r18, 0x64	; 100
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	40 e0       	ldi	r20, 0x00	; 0
    2e72:	50 e0       	ldi	r21, 0x00	; 0
    2e74:	bc 01       	movw	r22, r24
    2e76:	cd 01       	movw	r24, r26
    2e78:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodsi4>
    2e7c:	da 01       	movw	r26, r20
    2e7e:	c9 01       	movw	r24, r18
    2e80:	80 5d       	subi	r24, 0xD0	; 208
    2e82:	0e 94 49 16 	call	0x2c92	; 0x2c92 <USART_voidSend_char>
	USART_voidSend_char(((Cpy_Number%100)/10)+48);
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	9a 81       	ldd	r25, Y+2	; 0x02
    2e8a:	ab 81       	ldd	r26, Y+3	; 0x03
    2e8c:	bc 81       	ldd	r27, Y+4	; 0x04
    2e8e:	24 e6       	ldi	r18, 0x64	; 100
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e0       	ldi	r20, 0x00	; 0
    2e94:	50 e0       	ldi	r21, 0x00	; 0
    2e96:	bc 01       	movw	r22, r24
    2e98:	cd 01       	movw	r24, r26
    2e9a:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodsi4>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	2a e0       	ldi	r18, 0x0A	; 10
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	40 e0       	ldi	r20, 0x00	; 0
    2ea8:	50 e0       	ldi	r21, 0x00	; 0
    2eaa:	bc 01       	movw	r22, r24
    2eac:	cd 01       	movw	r24, r26
    2eae:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodsi4>
    2eb2:	da 01       	movw	r26, r20
    2eb4:	c9 01       	movw	r24, r18
    2eb6:	80 5d       	subi	r24, 0xD0	; 208
    2eb8:	0e 94 49 16 	call	0x2c92	; 0x2c92 <USART_voidSend_char>
	USART_voidSend_char((Cpy_Number%10)+48);
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec0:	ab 81       	ldd	r26, Y+3	; 0x03
    2ec2:	bc 81       	ldd	r27, Y+4	; 0x04
    2ec4:	2a e0       	ldi	r18, 0x0A	; 10
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	40 e0       	ldi	r20, 0x00	; 0
    2eca:	50 e0       	ldi	r21, 0x00	; 0
    2ecc:	bc 01       	movw	r22, r24
    2ece:	cd 01       	movw	r24, r26
    2ed0:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodsi4>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	80 5d       	subi	r24, 0xD0	; 208
    2eda:	0e 94 49 16 	call	0x2c92	; 0x2c92 <USART_voidSend_char>
}
    2ede:	0f 90       	pop	r0
    2ee0:	0f 90       	pop	r0
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	cf 91       	pop	r28
    2ee8:	df 91       	pop	r29
    2eea:	08 95       	ret

00002eec <USART_voidReceive_finish>:

u8 USART_voidReceive_finish(void)
{
    2eec:	df 93       	push	r29
    2eee:	cf 93       	push	r28
    2ef0:	0f 92       	push	r0
    2ef2:	cd b7       	in	r28, 0x3d	; 61
    2ef4:	de b7       	in	r29, 0x3e	; 62
	if(GET_BIT(UCSRA,UCSRA_RXC) != 0) //
    2ef6:	eb e2       	ldi	r30, 0x2B	; 43
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 81       	ld	r24, Z
    2efc:	88 23       	and	r24, r24
    2efe:	34 f4       	brge	.+12     	; 0x2f0c <USART_voidReceive_finish+0x20>
	{
	return UDR ;
    2f00:	ec e2       	ldi	r30, 0x2C	; 44
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	89 83       	std	Y+1, r24	; 0x01
	}
}
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	00 c0       	rjmp	.+0      	; 0x2f0c <USART_voidReceive_finish+0x20>
    2f0c:	0f 90       	pop	r0
    2f0e:	cf 91       	pop	r28
    2f10:	df 91       	pop	r29
    2f12:	08 95       	ret

00002f14 <main>:
#include "UART_Interface.h"
#include "M_C_H_Interface.h"
#include "Timer_interface.h"

void main(void)
{
    2f14:	df 93       	push	r29
    2f16:	cf 93       	push	r28
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
	USART_Init();
    2f1c:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <USART_Init>
	Segment7_VoidInit();
    2f20:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <Segment7_VoidInit>

	//ADC signal Input channel 0
	DIO_u8_SetPin_Dir(Group_A,DIO_u8_Pin_0,DIO_u8_Input);
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	60 e0       	ldi	r22, 0x00	; 0
    2f28:	40 e0       	ldi	r20, 0x00	; 0
    2f2a:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_u8_SetPin_Dir>
	DIO_u8_SetPin_value(Group_A,DIO_u8_Pin_0,DIO_u8_Low);
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	60 e0       	ldi	r22, 0x00	; 0
    2f32:	40 e0       	ldi	r20, 0x00	; 0
    2f34:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_u8_SetPin_value>

	//ADC signal Input channel 1
	DIO_u8_SetPin_Dir(Group_A,DIO_u8_Pin_1,DIO_u8_Input);
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	61 e0       	ldi	r22, 0x01	; 1
    2f3c:	40 e0       	ldi	r20, 0x00	; 0
    2f3e:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_u8_SetPin_Dir>
	DIO_u8_SetPin_value(Group_A,DIO_u8_Pin_1,DIO_u8_Low);
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	61 e0       	ldi	r22, 0x01	; 1
    2f46:	40 e0       	ldi	r20, 0x00	; 0
    2f48:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_u8_SetPin_value>

	//ADC signal Output Light Leds
	DIO_u8_SetPort_Dir(Group_C,DIO_u8_PORT_Output);
    2f4c:	82 e0       	ldi	r24, 0x02	; 2
    2f4e:	6f ef       	ldi	r22, 0xFF	; 255
    2f50:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <DIO_u8_SetPort_Dir>

	//Connect Ground to Leds
	DIO_u8_SetPin_Dir(Group_D,DIO_u8_Pin_7,DIO_u8_Output);
    2f54:	83 e0       	ldi	r24, 0x03	; 3
    2f56:	67 e0       	ldi	r22, 0x07	; 7
    2f58:	41 e0       	ldi	r20, 0x01	; 1
    2f5a:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_u8_SetPin_Dir>

	//7Segment
	DIO_u8_SetPort_Dir(Group_B, DIO_u8_PORT_Output);
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	6f ef       	ldi	r22, 0xFF	; 255
    2f62:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <DIO_u8_SetPort_Dir>

	//7Segment Com
	DIO_u8_SetPin_Dir(Group_A, DIO_u8_Pin_6, DIO_u8_Output);
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	66 e0       	ldi	r22, 0x06	; 6
    2f6a:	41 e0       	ldi	r20, 0x01	; 1
    2f6c:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_u8_SetPin_Dir>

	// Leds
	DIO_u8_SetPort_Dir(Group_C, DIO_u8_PORT_Output);
    2f70:	82 e0       	ldi	r24, 0x02	; 2
    2f72:	6f ef       	ldi	r22, 0xFF	; 255
    2f74:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <DIO_u8_SetPort_Dir>

	//Door, fan , light, Alarm
	DIO_u8_SetPort_Dir(Group_D, DIO_u8_PORT_Output);
    2f78:	83 e0       	ldi	r24, 0x03	; 3
    2f7a:	6f ef       	ldi	r22, 0xFF	; 255
    2f7c:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <DIO_u8_SetPort_Dir>

	ID_PASS();
    2f80:	0e 94 9e 0b 	call	0x173c	; 0x173c <ID_PASS>
    2f84:	ff cf       	rjmp	.-2      	; 0x2f84 <main+0x70>

00002f86 <__mulsi3>:
    2f86:	62 9f       	mul	r22, r18
    2f88:	d0 01       	movw	r26, r0
    2f8a:	73 9f       	mul	r23, r19
    2f8c:	f0 01       	movw	r30, r0
    2f8e:	82 9f       	mul	r24, r18
    2f90:	e0 0d       	add	r30, r0
    2f92:	f1 1d       	adc	r31, r1
    2f94:	64 9f       	mul	r22, r20
    2f96:	e0 0d       	add	r30, r0
    2f98:	f1 1d       	adc	r31, r1
    2f9a:	92 9f       	mul	r25, r18
    2f9c:	f0 0d       	add	r31, r0
    2f9e:	83 9f       	mul	r24, r19
    2fa0:	f0 0d       	add	r31, r0
    2fa2:	74 9f       	mul	r23, r20
    2fa4:	f0 0d       	add	r31, r0
    2fa6:	65 9f       	mul	r22, r21
    2fa8:	f0 0d       	add	r31, r0
    2faa:	99 27       	eor	r25, r25
    2fac:	72 9f       	mul	r23, r18
    2fae:	b0 0d       	add	r27, r0
    2fb0:	e1 1d       	adc	r30, r1
    2fb2:	f9 1f       	adc	r31, r25
    2fb4:	63 9f       	mul	r22, r19
    2fb6:	b0 0d       	add	r27, r0
    2fb8:	e1 1d       	adc	r30, r1
    2fba:	f9 1f       	adc	r31, r25
    2fbc:	bd 01       	movw	r22, r26
    2fbe:	cf 01       	movw	r24, r30
    2fc0:	11 24       	eor	r1, r1
    2fc2:	08 95       	ret

00002fc4 <__udivmodqi4>:
    2fc4:	99 1b       	sub	r25, r25
    2fc6:	79 e0       	ldi	r23, 0x09	; 9
    2fc8:	04 c0       	rjmp	.+8      	; 0x2fd2 <__udivmodqi4_ep>

00002fca <__udivmodqi4_loop>:
    2fca:	99 1f       	adc	r25, r25
    2fcc:	96 17       	cp	r25, r22
    2fce:	08 f0       	brcs	.+2      	; 0x2fd2 <__udivmodqi4_ep>
    2fd0:	96 1b       	sub	r25, r22

00002fd2 <__udivmodqi4_ep>:
    2fd2:	88 1f       	adc	r24, r24
    2fd4:	7a 95       	dec	r23
    2fd6:	c9 f7       	brne	.-14     	; 0x2fca <__udivmodqi4_loop>
    2fd8:	80 95       	com	r24
    2fda:	08 95       	ret

00002fdc <__udivmodhi4>:
    2fdc:	aa 1b       	sub	r26, r26
    2fde:	bb 1b       	sub	r27, r27
    2fe0:	51 e1       	ldi	r21, 0x11	; 17
    2fe2:	07 c0       	rjmp	.+14     	; 0x2ff2 <__udivmodhi4_ep>

00002fe4 <__udivmodhi4_loop>:
    2fe4:	aa 1f       	adc	r26, r26
    2fe6:	bb 1f       	adc	r27, r27
    2fe8:	a6 17       	cp	r26, r22
    2fea:	b7 07       	cpc	r27, r23
    2fec:	10 f0       	brcs	.+4      	; 0x2ff2 <__udivmodhi4_ep>
    2fee:	a6 1b       	sub	r26, r22
    2ff0:	b7 0b       	sbc	r27, r23

00002ff2 <__udivmodhi4_ep>:
    2ff2:	88 1f       	adc	r24, r24
    2ff4:	99 1f       	adc	r25, r25
    2ff6:	5a 95       	dec	r21
    2ff8:	a9 f7       	brne	.-22     	; 0x2fe4 <__udivmodhi4_loop>
    2ffa:	80 95       	com	r24
    2ffc:	90 95       	com	r25
    2ffe:	bc 01       	movw	r22, r24
    3000:	cd 01       	movw	r24, r26
    3002:	08 95       	ret

00003004 <__udivmodsi4>:
    3004:	a1 e2       	ldi	r26, 0x21	; 33
    3006:	1a 2e       	mov	r1, r26
    3008:	aa 1b       	sub	r26, r26
    300a:	bb 1b       	sub	r27, r27
    300c:	fd 01       	movw	r30, r26
    300e:	0d c0       	rjmp	.+26     	; 0x302a <__udivmodsi4_ep>

00003010 <__udivmodsi4_loop>:
    3010:	aa 1f       	adc	r26, r26
    3012:	bb 1f       	adc	r27, r27
    3014:	ee 1f       	adc	r30, r30
    3016:	ff 1f       	adc	r31, r31
    3018:	a2 17       	cp	r26, r18
    301a:	b3 07       	cpc	r27, r19
    301c:	e4 07       	cpc	r30, r20
    301e:	f5 07       	cpc	r31, r21
    3020:	20 f0       	brcs	.+8      	; 0x302a <__udivmodsi4_ep>
    3022:	a2 1b       	sub	r26, r18
    3024:	b3 0b       	sbc	r27, r19
    3026:	e4 0b       	sbc	r30, r20
    3028:	f5 0b       	sbc	r31, r21

0000302a <__udivmodsi4_ep>:
    302a:	66 1f       	adc	r22, r22
    302c:	77 1f       	adc	r23, r23
    302e:	88 1f       	adc	r24, r24
    3030:	99 1f       	adc	r25, r25
    3032:	1a 94       	dec	r1
    3034:	69 f7       	brne	.-38     	; 0x3010 <__udivmodsi4_loop>
    3036:	60 95       	com	r22
    3038:	70 95       	com	r23
    303a:	80 95       	com	r24
    303c:	90 95       	com	r25
    303e:	9b 01       	movw	r18, r22
    3040:	ac 01       	movw	r20, r24
    3042:	bd 01       	movw	r22, r26
    3044:	cf 01       	movw	r24, r30
    3046:	08 95       	ret

00003048 <__divmodsi4>:
    3048:	97 fb       	bst	r25, 7
    304a:	09 2e       	mov	r0, r25
    304c:	05 26       	eor	r0, r21
    304e:	0e d0       	rcall	.+28     	; 0x306c <__divmodsi4_neg1>
    3050:	57 fd       	sbrc	r21, 7
    3052:	04 d0       	rcall	.+8      	; 0x305c <__divmodsi4_neg2>
    3054:	d7 df       	rcall	.-82     	; 0x3004 <__udivmodsi4>
    3056:	0a d0       	rcall	.+20     	; 0x306c <__divmodsi4_neg1>
    3058:	00 1c       	adc	r0, r0
    305a:	38 f4       	brcc	.+14     	; 0x306a <__divmodsi4_exit>

0000305c <__divmodsi4_neg2>:
    305c:	50 95       	com	r21
    305e:	40 95       	com	r20
    3060:	30 95       	com	r19
    3062:	21 95       	neg	r18
    3064:	3f 4f       	sbci	r19, 0xFF	; 255
    3066:	4f 4f       	sbci	r20, 0xFF	; 255
    3068:	5f 4f       	sbci	r21, 0xFF	; 255

0000306a <__divmodsi4_exit>:
    306a:	08 95       	ret

0000306c <__divmodsi4_neg1>:
    306c:	f6 f7       	brtc	.-4      	; 0x306a <__divmodsi4_exit>
    306e:	90 95       	com	r25
    3070:	80 95       	com	r24
    3072:	70 95       	com	r23
    3074:	61 95       	neg	r22
    3076:	7f 4f       	sbci	r23, 0xFF	; 255
    3078:	8f 4f       	sbci	r24, 0xFF	; 255
    307a:	9f 4f       	sbci	r25, 0xFF	; 255
    307c:	08 95       	ret

0000307e <__prologue_saves__>:
    307e:	2f 92       	push	r2
    3080:	3f 92       	push	r3
    3082:	4f 92       	push	r4
    3084:	5f 92       	push	r5
    3086:	6f 92       	push	r6
    3088:	7f 92       	push	r7
    308a:	8f 92       	push	r8
    308c:	9f 92       	push	r9
    308e:	af 92       	push	r10
    3090:	bf 92       	push	r11
    3092:	cf 92       	push	r12
    3094:	df 92       	push	r13
    3096:	ef 92       	push	r14
    3098:	ff 92       	push	r15
    309a:	0f 93       	push	r16
    309c:	1f 93       	push	r17
    309e:	cf 93       	push	r28
    30a0:	df 93       	push	r29
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	ca 1b       	sub	r28, r26
    30a8:	db 0b       	sbc	r29, r27
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	f8 94       	cli
    30ae:	de bf       	out	0x3e, r29	; 62
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	cd bf       	out	0x3d, r28	; 61
    30b4:	09 94       	ijmp

000030b6 <__epilogue_restores__>:
    30b6:	2a 88       	ldd	r2, Y+18	; 0x12
    30b8:	39 88       	ldd	r3, Y+17	; 0x11
    30ba:	48 88       	ldd	r4, Y+16	; 0x10
    30bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    30be:	6e 84       	ldd	r6, Y+14	; 0x0e
    30c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    30c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    30c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    30c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    30c8:	b9 84       	ldd	r11, Y+9	; 0x09
    30ca:	c8 84       	ldd	r12, Y+8	; 0x08
    30cc:	df 80       	ldd	r13, Y+7	; 0x07
    30ce:	ee 80       	ldd	r14, Y+6	; 0x06
    30d0:	fd 80       	ldd	r15, Y+5	; 0x05
    30d2:	0c 81       	ldd	r16, Y+4	; 0x04
    30d4:	1b 81       	ldd	r17, Y+3	; 0x03
    30d6:	aa 81       	ldd	r26, Y+2	; 0x02
    30d8:	b9 81       	ldd	r27, Y+1	; 0x01
    30da:	ce 0f       	add	r28, r30
    30dc:	d1 1d       	adc	r29, r1
    30de:	0f b6       	in	r0, 0x3f	; 63
    30e0:	f8 94       	cli
    30e2:	de bf       	out	0x3e, r29	; 62
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	cd bf       	out	0x3d, r28	; 61
    30e8:	ed 01       	movw	r28, r26
    30ea:	08 95       	ret

000030ec <_exit>:
    30ec:	f8 94       	cli

000030ee <__stop_program>:
    30ee:	ff cf       	rjmp	.-2      	; 0x30ee <__stop_program>
